
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c00  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff4  08006d88  08006d88  00007d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d7c  08009d7c  0000b01c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d7c  08009d7c  0000ad7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d84  08009d84  0000b01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d84  08009d84  0000ad84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d88  08009d88  0000ad88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009d8c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b01c  2**0
                  CONTENTS
 10 .bss          000001dc  2000001c  2000001c  0000b01c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  0000b01c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b01c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a05  00000000  00000000  0000b04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003438  00000000  00000000  0001da51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00020e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e77  00000000  00000000  00022130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002397a  00000000  00000000  00022fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019387  00000000  00000000  00046921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfada  00000000  00000000  0005fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f782  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d44  00000000  00000000  0012f7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013450c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d70 	.word	0x08006d70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08006d70 	.word	0x08006d70

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <button_init>:
/**
 * @brief  Init matrix button
 * @param  None
 * @retval None
 */
void button_init() {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <button_init+0x14>)
 8000c9e:	f003 f8ad 	bl	8003dfc <HAL_GPIO_WritePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40020c00 	.word	0x40020c00

08000cac <button_Scan>:
 * @brief  Scan matrix button
 * @param  None
 * @note  	Call every 50ms
 * @retval None
 */
void button_Scan() {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	482f      	ldr	r0, [pc, #188]	@ (8000d74 <button_Scan+0xc8>)
 8000cb8:	f003 f8a0 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	482c      	ldr	r0, [pc, #176]	@ (8000d74 <button_Scan+0xc8>)
 8000cc2:	f003 f89b 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &spi_button, 2, 10);
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	2202      	movs	r2, #2
 8000cca:	492b      	ldr	r1, [pc, #172]	@ (8000d78 <button_Scan+0xcc>)
 8000ccc:	482b      	ldr	r0, [pc, #172]	@ (8000d7c <button_Scan+0xd0>)
 8000cce:	f004 feaa 	bl	8005a26 <HAL_SPI_Receive>
	int button_index = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8000cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cda:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	e03f      	b.n	8000d62 <button_Scan+0xb6>
		if (i >= 0 && i <= 3) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db06      	blt.n	8000cf6 <button_Scan+0x4a>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	dc03      	bgt.n	8000cf6 <button_Scan+0x4a>
			button_index = i + 4;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e018      	b.n	8000d28 <button_Scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	dd07      	ble.n	8000d0c <button_Scan+0x60>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	dc04      	bgt.n	8000d0c <button_Scan+0x60>
			button_index = 7 - i;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f1c3 0307 	rsb	r3, r3, #7
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e00d      	b.n	8000d28 <button_Scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	dd06      	ble.n	8000d20 <button_Scan+0x74>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0b      	cmp	r3, #11
 8000d16:	dc03      	bgt.n	8000d20 <button_Scan+0x74>
			button_index = i + 4;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	e003      	b.n	8000d28 <button_Scan+0x7c>
		} else {
			button_index = 23 - i;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f1c3 0317 	rsb	r3, r3, #23
 8000d26:	60fb      	str	r3, [r7, #12]
		}
		if (spi_button & mask)
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <button_Scan+0xcc>)
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	897b      	ldrh	r3, [r7, #10]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d005      	beq.n	8000d42 <button_Scan+0x96>
			button_count[button_index] = 0;
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <button_Scan+0xd4>)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d40:	e009      	b.n	8000d56 <button_Scan+0xaa>
		else
			button_count[button_index]++;
 8000d42:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <button_Scan+0xd4>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <button_Scan+0xd4>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000d56:	897b      	ldrh	r3, [r7, #10]
 8000d58:	085b      	lsrs	r3, r3, #1
 8000d5a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	ddbc      	ble.n	8000ce2 <button_Scan+0x36>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40020c00 	.word	0x40020c00
 8000d78:	20000058 	.word	0x20000058
 8000d7c:	20000154 	.word	0x20000154
 8000d80:	20000038 	.word	0x20000038

08000d84 <is_button_pressed>:
 * @brief  check button "id" is pressed
 * @param  id - id of button [0...15]
 * @retval 1: button is pressed
 * 		0: invalid para OR button is not pressed
 */
bool is_button_pressed(uint8_t id) {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b10      	cmp	r3, #16
 8000d92:	d901      	bls.n	8000d98 <is_button_pressed+0x14>
		return 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e008      	b.n	8000daa <is_button_pressed+0x26>
	return button_count[id] != 0;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <is_button_pressed+0x34>)
 8000d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000038 	.word	0x20000038

08000dbc <is_button_long_pressed>:
 * @brief  check button "id" is pressed
 * @param  id - id of button [0...15]
 * @retval 1: button is long pressed
 * 		0: invalid para OR button is not long pressed
 */
bool is_button_long_pressed(uint8_t id) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b10      	cmp	r3, #16
 8000dca:	d901      	bls.n	8000dd0 <is_button_long_pressed+0x14>
		return 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e008      	b.n	8000de2 <is_button_long_pressed+0x26>
	if (button_count[id] < LONG_PRESSED_TIME / READ_BUTTON_TIME) {
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <is_button_long_pressed+0x34>)
 8000dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd8:	2bc7      	cmp	r3, #199	@ 0xc7
 8000dda:	d801      	bhi.n	8000de0 <is_button_long_pressed+0x24>
		return 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e000      	b.n	8000de2 <is_button_long_pressed+0x26>
	}
	return 1;
 8000de0:	2301      	movs	r3, #1
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000038 	.word	0x20000038

08000df4 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000df8:	201e      	movs	r0, #30
 8000dfa:	f002 fc6d 	bl	80036d8 <DEC2BCD>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <ds3231_init+0x80>)
 8000e04:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000e06:	2016      	movs	r0, #22
 8000e08:	f002 fc66 	bl	80036d8 <DEC2BCD>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <ds3231_init+0x80>)
 8000e12:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000e14:	2015      	movs	r0, #21
 8000e16:	f002 fc5f 	bl	80036d8 <DEC2BCD>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <ds3231_init+0x80>)
 8000e20:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000e22:	2006      	movs	r0, #6
 8000e24:	f002 fc58 	bl	80036d8 <DEC2BCD>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <ds3231_init+0x80>)
 8000e2e:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000e30:	200f      	movs	r0, #15
 8000e32:	f002 fc51 	bl	80036d8 <DEC2BCD>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <ds3231_init+0x80>)
 8000e3c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000e3e:	2009      	movs	r0, #9
 8000e40:	f002 fc4a 	bl	80036d8 <DEC2BCD>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <ds3231_init+0x80>)
 8000e4a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000e4c:	2017      	movs	r0, #23
 8000e4e:	f002 fc43 	bl	80036d8 <DEC2BCD>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <ds3231_init+0x80>)
 8000e58:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000e5a:	2332      	movs	r3, #50	@ 0x32
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	21d0      	movs	r1, #208	@ 0xd0
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <ds3231_init+0x84>)
 8000e62:	f003 fc49 	bl	80046f8 <HAL_I2C_IsDeviceReady>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <ds3231_init+0x7c>
		while(1);
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <ds3231_init+0x78>
	};
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2000005c 	.word	0x2000005c
 8000e78:	200000c0 	.word	0x200000c0

08000e7c <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af04      	add	r7, sp, #16
 8000e82:	4603      	mov	r3, r0
 8000e84:	460a      	mov	r2, r1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fc22 	bl	80036d8 <DEC2BCD>
 8000e94:	4603      	mov	r3, r0
 8000e96:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f107 030f 	add.w	r3, r7, #15
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	21d0      	movs	r1, #208	@ 0xd0
 8000eae:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <ds3231_Write+0x40>)
 8000eb0:	f003 f902 	bl	80040b8 <HAL_I2C_Mem_Write>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000c0 	.word	0x200000c0

08000ec0 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	2307      	movs	r3, #7
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <ds3231_ReadTime+0xa4>)
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	21d0      	movs	r1, #208	@ 0xd0
 8000ed8:	4823      	ldr	r0, [pc, #140]	@ (8000f68 <ds3231_ReadTime+0xa8>)
 8000eda:	f003 f9e7 	bl	80042ac <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000ede:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <ds3231_ReadTime+0xa4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 fbde 	bl	80036a4 <BCD2DEC>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <ds3231_ReadTime+0xac>)
 8000eee:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <ds3231_ReadTime+0xa4>)
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 fbd5 	bl	80036a4 <BCD2DEC>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <ds3231_ReadTime+0xb0>)
 8000f00:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <ds3231_ReadTime+0xa4>)
 8000f04:	789b      	ldrb	r3, [r3, #2]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 fbcc 	bl	80036a4 <BCD2DEC>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <ds3231_ReadTime+0xb4>)
 8000f12:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <ds3231_ReadTime+0xa4>)
 8000f16:	78db      	ldrb	r3, [r3, #3]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fbc3 	bl	80036a4 <BCD2DEC>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <ds3231_ReadTime+0xb8>)
 8000f24:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <ds3231_ReadTime+0xa4>)
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 fbba 	bl	80036a4 <BCD2DEC>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <ds3231_ReadTime+0xbc>)
 8000f36:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <ds3231_ReadTime+0xa4>)
 8000f3a:	795b      	ldrb	r3, [r3, #5]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fbb1 	bl	80036a4 <BCD2DEC>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <ds3231_ReadTime+0xc0>)
 8000f48:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <ds3231_ReadTime+0xa4>)
 8000f4c:	799b      	ldrb	r3, [r3, #6]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fba8 	bl	80036a4 <BCD2DEC>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <ds3231_ReadTime+0xc4>)
 8000f5a:	701a      	strb	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000005c 	.word	0x2000005c
 8000f68:	200000c0 	.word	0x200000c0
 8000f6c:	20000065 	.word	0x20000065
 8000f70:	20000064 	.word	0x20000064
 8000f74:	20000063 	.word	0x20000063
 8000f78:	20000067 	.word	0x20000067
 8000f7c:	20000066 	.word	0x20000066
 8000f80:	20000068 	.word	0x20000068
 8000f84:	20000069 	.word	0x20000069

08000f88 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	@ 0x38
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fb6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000fba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <MX_FSMC_Init+0xf0>)
 8000fc0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fce:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fda:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000fec:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000ff4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <MX_FSMC_Init+0xec>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001000:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <MX_FSMC_Init+0xec>)
 8001002:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001006:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_FSMC_Init+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <MX_FSMC_Init+0xec>)
 8001010:	2200      	movs	r2, #0
 8001012:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <MX_FSMC_Init+0xec>)
 8001016:	2200      	movs	r2, #0
 8001018:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800101a:	230f      	movs	r3, #15
 800101c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800101e:	230f      	movs	r3, #15
 8001020:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001022:	233c      	movs	r3, #60	@ 0x3c
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800102a:	2310      	movs	r3, #16
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800102e:	2311      	movs	r3, #17
 8001030:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001032:	2300      	movs	r3, #0
 8001034:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001036:	2308      	movs	r3, #8
 8001038:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800103a:	230f      	movs	r3, #15
 800103c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800103e:	2309      	movs	r3, #9
 8001040:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001046:	2310      	movs	r3, #16
 8001048:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800104a:	2311      	movs	r3, #17
 800104c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001052:	463a      	mov	r2, r7
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	@ (8001074 <MX_FSMC_Init+0xec>)
 800105c:	f005 f8c6 	bl	80061ec <HAL_SRAM_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001066:	f000 fe6f 	bl	8001d48 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800106a:	bf00      	nop
 800106c:	3738      	adds	r7, #56	@ 0x38
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000006c 	.word	0x2000006c
 8001078:	a0000104 	.word	0xa0000104

0800107c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_FSMC_MspInit+0x88>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d131      	bne.n	80010fc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HAL_FSMC_MspInit+0x88>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_FSMC_MspInit+0x8c>)
 80010a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <HAL_FSMC_MspInit+0x8c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6393      	str	r3, [r2, #56]	@ 0x38
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_FSMC_MspInit+0x8c>)
 80010b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80010ba:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80010be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010cc:	230c      	movs	r3, #12
 80010ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	480d      	ldr	r0, [pc, #52]	@ (800110c <HAL_FSMC_MspInit+0x90>)
 80010d6:	f002 fcf5 	bl	8003ac4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80010da:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80010de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010ec:	230c      	movs	r3, #12
 80010ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4806      	ldr	r0, [pc, #24]	@ (8001110 <HAL_FSMC_MspInit+0x94>)
 80010f6:	f002 fce5 	bl	8003ac4 <HAL_GPIO_Init>
 80010fa:	e000      	b.n	80010fe <HAL_FSMC_MspInit+0x82>
    return;
 80010fc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000bc 	.word	0x200000bc
 8001108:	40023800 	.word	0x40023800
 800110c:	40021000 	.word	0x40021000
 8001110:	40020c00 	.word	0x40020c00

08001114 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800111c:	f7ff ffae 	bl	800107c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	@ 0x30
 800112c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	4b6f      	ldr	r3, [pc, #444]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a6e      	ldr	r2, [pc, #440]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b6c      	ldr	r3, [pc, #432]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	4b68      	ldr	r3, [pc, #416]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a67      	ldr	r2, [pc, #412]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b65      	ldr	r3, [pc, #404]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b61      	ldr	r3, [pc, #388]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a60      	ldr	r2, [pc, #384]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b5e      	ldr	r3, [pc, #376]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b5a      	ldr	r3, [pc, #360]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a59      	ldr	r2, [pc, #356]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b57      	ldr	r3, [pc, #348]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b53      	ldr	r3, [pc, #332]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a52      	ldr	r2, [pc, #328]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b50      	ldr	r3, [pc, #320]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b49      	ldr	r3, [pc, #292]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b45      	ldr	r3, [pc, #276]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a44      	ldr	r2, [pc, #272]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b42      	ldr	r3, [pc, #264]	@ (8001300 <MX_GPIO_Init+0x1d8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2170      	movs	r1, #112	@ 0x70
 8001206:	483f      	ldr	r0, [pc, #252]	@ (8001304 <MX_GPIO_Init+0x1dc>)
 8001208:	f002 fdf8 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001212:	483d      	ldr	r0, [pc, #244]	@ (8001308 <MX_GPIO_Init+0x1e0>)
 8001214:	f002 fdf2 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2140      	movs	r1, #64	@ 0x40
 800121c:	483b      	ldr	r0, [pc, #236]	@ (800130c <MX_GPIO_Init+0x1e4>)
 800121e:	f002 fded 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001228:	4839      	ldr	r0, [pc, #228]	@ (8001310 <MX_GPIO_Init+0x1e8>)
 800122a:	f002 fde7 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2108      	movs	r1, #8
 8001232:	4838      	ldr	r0, [pc, #224]	@ (8001314 <MX_GPIO_Init+0x1ec>)
 8001234:	f002 fde2 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001238:	2370      	movs	r3, #112	@ 0x70
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	482d      	ldr	r0, [pc, #180]	@ (8001304 <MX_GPIO_Init+0x1dc>)
 8001250:	f002 fc38 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4826      	ldr	r0, [pc, #152]	@ (8001308 <MX_GPIO_Init+0x1e0>)
 800126e:	f002 fc29 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001272:	23c0      	movs	r3, #192	@ 0xc0
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4822      	ldr	r0, [pc, #136]	@ (8001310 <MX_GPIO_Init+0x1e8>)
 8001286:	f002 fc1d 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800128a:	2330      	movs	r3, #48	@ 0x30
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	481a      	ldr	r0, [pc, #104]	@ (8001308 <MX_GPIO_Init+0x1e0>)
 800129e:	f002 fc11 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80012a2:	2340      	movs	r3, #64	@ 0x40
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4814      	ldr	r0, [pc, #80]	@ (800130c <MX_GPIO_Init+0x1e4>)
 80012ba:	f002 fc03 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80012be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	480e      	ldr	r0, [pc, #56]	@ (8001310 <MX_GPIO_Init+0x1e8>)
 80012d8:	f002 fbf4 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80012dc:	2308      	movs	r3, #8
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4808      	ldr	r0, [pc, #32]	@ (8001314 <MX_GPIO_Init+0x1ec>)
 80012f4:	f002 fbe6 	bl	8003ac4 <HAL_GPIO_Init>

}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	@ 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40021000 	.word	0x40021000
 8001308:	40020800 	.word	0x40020800
 800130c:	40021800 	.word	0x40021800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020c00 	.word	0x40020c00

08001318 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_I2C1_Init+0x50>)
 800131e:	4a13      	ldr	r2, [pc, #76]	@ (800136c <MX_I2C1_Init+0x54>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001324:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_I2C1_Init+0x58>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800133a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001356:	f002 fd6b 	bl	8003e30 <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001360:	f000 fcf2 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200000c0 	.word	0x200000c0
 800136c:	40005400 	.word	0x40005400
 8001370:	000186a0 	.word	0x000186a0

08001374 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a19      	ldr	r2, [pc, #100]	@ (80013f8 <HAL_I2C_MspInit+0x84>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12b      	bne.n	80013ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b2:	23c0      	movs	r3, #192	@ 0xc0
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b6:	2312      	movs	r3, #18
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013c2:	2304      	movs	r3, #4
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <HAL_I2C_MspInit+0x8c>)
 80013ce:	f002 fb79 	bl	8003ac4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	@ 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40005400 	.word	0x40005400
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400

08001404 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800140e:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <LCD_WR_REG+0x1c>)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	8013      	strh	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	600ffffe 	.word	0x600ffffe

08001424 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800142e:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <LCD_WR_DATA+0x1c>)
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	8053      	strh	r3, [r2, #2]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	600ffffe 	.word	0x600ffffe

08001444 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <LCD_RD_DATA+0x20>)
 800144c:	885b      	ldrh	r3, [r3, #2]
 800144e:	b29b      	uxth	r3, r3
 8001450:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	b29b      	uxth	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	600ffffe 	.word	0x600ffffe

08001468 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4604      	mov	r4, r0
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	461a      	mov	r2, r3
 8001476:	4623      	mov	r3, r4
 8001478:	80fb      	strh	r3, [r7, #6]
 800147a:	4603      	mov	r3, r0
 800147c:	80bb      	strh	r3, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	807b      	strh	r3, [r7, #2]
 8001482:	4613      	mov	r3, r2
 8001484:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001486:	202a      	movs	r0, #42	@ 0x2a
 8001488:	f7ff ffbc 	bl	8001404 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	b29b      	uxth	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffc6 	bl	8001424 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	b29b      	uxth	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffc0 	bl	8001424 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ffba 	bl	8001424 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ffb4 	bl	8001424 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80014bc:	202b      	movs	r0, #43	@ 0x2b
 80014be:	f7ff ffa1 	bl	8001404 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ffab 	bl	8001424 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ffa5 	bl	8001424 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80014da:	883b      	ldrh	r3, [r7, #0]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff9f 	bl	8001424 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80014e6:	883b      	ldrh	r3, [r7, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff99 	bl	8001424 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80014f2:	202c      	movs	r0, #44	@ 0x2c
 80014f4:	f7ff ff86 	bl	8001404 <LCD_WR_REG>
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	b29b      	uxth	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <lcd_Clear+0x70>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	3b01      	subs	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <lcd_Clear+0x70>)
 8001524:	885b      	ldrh	r3, [r3, #2]
 8001526:	3b01      	subs	r3, #1
 8001528:	b29b      	uxth	r3, r3
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff ff9b 	bl	8001468 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001532:	2300      	movs	r3, #0
 8001534:	81fb      	strh	r3, [r7, #14]
 8001536:	e011      	b.n	800155c <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001538:	2300      	movs	r3, #0
 800153a:	81bb      	strh	r3, [r7, #12]
 800153c:	e006      	b.n	800154c <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff6f 	bl	8001424 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001546:	89bb      	ldrh	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	81bb      	strh	r3, [r7, #12]
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <lcd_Clear+0x70>)
 800154e:	885b      	ldrh	r3, [r3, #2]
 8001550:	89ba      	ldrh	r2, [r7, #12]
 8001552:	429a      	cmp	r2, r3
 8001554:	d3f3      	bcc.n	800153e <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	3301      	adds	r3, #1
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <lcd_Clear+0x70>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	89fa      	ldrh	r2, [r7, #14]
 8001562:	429a      	cmp	r2, r3
 8001564:	d3e8      	bcc.n	8001538 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001566:	bf00      	nop
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000114 	.word	0x20000114

08001574 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
 800157e:	460b      	mov	r3, r1
 8001580:	80bb      	strh	r3, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	88fa      	ldrh	r2, [r7, #6]
 800158a:	88b9      	ldrh	r1, [r7, #4]
 800158c:	88f8      	ldrh	r0, [r7, #6]
 800158e:	f7ff ff6b 	bl	8001468 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff45 	bl	8001424 <LCD_WR_DATA>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4623      	mov	r3, r4
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	4603      	mov	r3, r0
 80015b8:	80bb      	strh	r3, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70fb      	strb	r3, [r7, #3]
 80015be:	4613      	mov	r3, r2
 80015c0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80015ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	fb12 f303 	smulbb	r3, r2, r3
 80015fa:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	3b20      	subs	r3, #32
 8001600:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	b29a      	uxth	r2, r3
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	4413      	add	r3, r2
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b01      	subs	r3, #1
 800160e:	b29c      	uxth	r4, r3
 8001610:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001614:	b29a      	uxth	r2, r3
 8001616:	88bb      	ldrh	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	88b9      	ldrh	r1, [r7, #4]
 8001622:	88f8      	ldrh	r0, [r7, #6]
 8001624:	4622      	mov	r2, r4
 8001626:	f7ff ff1f 	bl	8001468 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800162a:	2300      	movs	r3, #0
 800162c:	827b      	strh	r3, [r7, #18]
 800162e:	e07a      	b.n	8001726 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001630:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d028      	beq.n	800168a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001638:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800163c:	2b10      	cmp	r3, #16
 800163e:	d108      	bne.n	8001652 <lcd_ShowChar+0xae>
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	8a7b      	ldrh	r3, [r7, #18]
 8001644:	493c      	ldr	r1, [pc, #240]	@ (8001738 <lcd_ShowChar+0x194>)
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	440a      	add	r2, r1
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	75fb      	strb	r3, [r7, #23]
 8001650:	e01b      	b.n	800168a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001652:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001656:	2b18      	cmp	r3, #24
 8001658:	d10b      	bne.n	8001672 <lcd_ShowChar+0xce>
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	8a79      	ldrh	r1, [r7, #18]
 800165e:	4837      	ldr	r0, [pc, #220]	@ (800173c <lcd_ShowChar+0x198>)
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	4403      	add	r3, r0
 800166a:	440b      	add	r3, r1
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	75fb      	strb	r3, [r7, #23]
 8001670:	e00b      	b.n	800168a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001672:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001676:	2b20      	cmp	r3, #32
 8001678:	d15a      	bne.n	8001730 <lcd_ShowChar+0x18c>
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	8a7b      	ldrh	r3, [r7, #18]
 800167e:	4930      	ldr	r1, [pc, #192]	@ (8001740 <lcd_ShowChar+0x19c>)
 8001680:	0192      	lsls	r2, r2, #6
 8001682:	440a      	add	r2, r1
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800168a:	2300      	movs	r3, #0
 800168c:	75bb      	strb	r3, [r7, #22]
 800168e:	e044      	b.n	800171a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001690:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001694:	2b00      	cmp	r3, #0
 8001696:	d120      	bne.n	80016da <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001698:	7dfa      	ldrb	r2, [r7, #23]
 800169a:	7dbb      	ldrb	r3, [r7, #22]
 800169c:	fa42 f303 	asr.w	r3, r2, r3
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <lcd_ShowChar+0x10e>
 80016a8:	883b      	ldrh	r3, [r7, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff feba 	bl	8001424 <LCD_WR_DATA>
 80016b0:	e003      	b.n	80016ba <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80016b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff feb5 	bl	8001424 <LCD_WR_DATA>
				m++;
 80016ba:	7d7b      	ldrb	r3, [r7, #21]
 80016bc:	3301      	adds	r3, #1
 80016be:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80016c0:	7d7b      	ldrb	r3, [r7, #21]
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80016c8:	fb01 f202 	mul.w	r2, r1, r2
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11f      	bne.n	8001714 <lcd_ShowChar+0x170>
				{
					m=0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	757b      	strb	r3, [r7, #21]
					break;
 80016d8:	e022      	b.n	8001720 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80016da:	7dfa      	ldrb	r2, [r7, #23]
 80016dc:	7dbb      	ldrb	r3, [r7, #22]
 80016de:	fa42 f303 	asr.w	r3, r2, r3
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <lcd_ShowChar+0x152>
 80016ea:	883a      	ldrh	r2, [r7, #0]
 80016ec:	88b9      	ldrh	r1, [r7, #4]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff3f 	bl	8001574 <lcd_DrawPoint>
				x++;
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	3301      	adds	r3, #1
 80016fa:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80016fc:	88fa      	ldrh	r2, [r7, #6]
 80016fe:	8a3b      	ldrh	r3, [r7, #16]
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	429a      	cmp	r2, r3
 8001706:	d105      	bne.n	8001714 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001708:	8a3b      	ldrh	r3, [r7, #16]
 800170a:	80fb      	strh	r3, [r7, #6]
					y++;
 800170c:	88bb      	ldrh	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	80bb      	strh	r3, [r7, #4]
					break;
 8001712:	e005      	b.n	8001720 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001714:	7dbb      	ldrb	r3, [r7, #22]
 8001716:	3301      	adds	r3, #1
 8001718:	75bb      	strb	r3, [r7, #22]
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	2b07      	cmp	r3, #7
 800171e:	d9b7      	bls.n	8001690 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001720:	8a7b      	ldrh	r3, [r7, #18]
 8001722:	3301      	adds	r3, #1
 8001724:	827b      	strh	r3, [r7, #18]
 8001726:	8a7a      	ldrh	r2, [r7, #18]
 8001728:	89bb      	ldrh	r3, [r7, #12]
 800172a:	429a      	cmp	r2, r3
 800172c:	d380      	bcc.n	8001630 <lcd_ShowChar+0x8c>
 800172e:	e000      	b.n	8001732 <lcd_ShowChar+0x18e>
		else return;
 8001730:	bf00      	nop
				}
			}
		}
	}
}
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	08006de4 	.word	0x08006de4
 800173c:	080073d4 	.word	0x080073d4
 8001740:	080085a4 	.word	0x080085a4

08001744 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001754:	2301      	movs	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001758:	e004      	b.n	8001764 <mypow+0x20>
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	1e5a      	subs	r2, r3, #1
 8001768:	71ba      	strb	r2, [r7, #6]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f5      	bne.n	800175a <mypow+0x16>
	return result;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b089      	sub	sp, #36	@ 0x24
 8001780:	af04      	add	r7, sp, #16
 8001782:	4604      	mov	r4, r0
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4623      	mov	r3, r4
 800178c:	80fb      	strh	r3, [r7, #6]
 800178e:	4603      	mov	r3, r0
 8001790:	80bb      	strh	r3, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	807b      	strh	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800179a:	2300      	movs	r3, #0
 800179c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800179e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e059      	b.n	8001860 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80017ac:	887c      	ldrh	r4, [r7, #2]
 80017ae:	787a      	ldrb	r2, [r7, #1]
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4619      	mov	r1, r3
 80017bc:	200a      	movs	r0, #10
 80017be:	f7ff ffc1 	bl	8001744 <mypow>
 80017c2:	4603      	mov	r3, r0
 80017c4:	fbb4 f1f3 	udiv	r1, r4, r3
 80017c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <lcd_ShowIntNum+0xf8>)
 80017ca:	fba3 2301 	umull	r2, r3, r3, r1
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	1aca      	subs	r2, r1, r3
 80017da:	4613      	mov	r3, r2
 80017dc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <lcd_ShowIntNum+0xac>
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	787b      	ldrb	r3, [r7, #1]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	429a      	cmp	r2, r3
 80017ec:	da1c      	bge.n	8001828 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80017ee:	7b3b      	ldrb	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d117      	bne.n	8001824 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	7b7b      	ldrb	r3, [r7, #13]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	fb12 f303 	smulbb	r3, r2, r3
 8001800:	b29a      	uxth	r2, r3
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	4413      	add	r3, r2
 8001806:	b298      	uxth	r0, r3
 8001808:	8c3a      	ldrh	r2, [r7, #32]
 800180a:	88b9      	ldrh	r1, [r7, #4]
 800180c:	2300      	movs	r3, #0
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	4613      	mov	r3, r2
 800181c:	2220      	movs	r2, #32
 800181e:	f7ff fec1 	bl	80015a4 <lcd_ShowChar>
				continue;
 8001822:	e01a      	b.n	800185a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001824:	2301      	movs	r3, #1
 8001826:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	b29a      	uxth	r2, r3
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	b29b      	uxth	r3, r3
 8001830:	fb12 f303 	smulbb	r3, r2, r3
 8001834:	b29a      	uxth	r2, r3
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4413      	add	r3, r2
 800183a:	b298      	uxth	r0, r3
 800183c:	7b3b      	ldrb	r3, [r7, #12]
 800183e:	3330      	adds	r3, #48	@ 0x30
 8001840:	b2da      	uxtb	r2, r3
 8001842:	8c3c      	ldrh	r4, [r7, #32]
 8001844:	88b9      	ldrh	r1, [r7, #4]
 8001846:	2300      	movs	r3, #0
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4623      	mov	r3, r4
 8001856:	f7ff fea5 	bl	80015a4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	3301      	adds	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	787b      	ldrb	r3, [r7, #1]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3a1      	bcc.n	80017ac <lcd_ShowIntNum+0x30>
	}
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	cccccccd 	.word	0xcccccccd

08001878 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <lcd_SetDir+0x44>)
 8001894:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001898:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <lcd_SetDir+0x44>)
 800189c:	22f0      	movs	r2, #240	@ 0xf0
 800189e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80018a0:	e006      	b.n	80018b0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <lcd_SetDir+0x44>)
 80018a4:	22f0      	movs	r2, #240	@ 0xf0
 80018a6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <lcd_SetDir+0x44>)
 80018aa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80018ae:	805a      	strh	r2, [r3, #2]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	20000114 	.word	0x20000114

080018c0 <lcd_init>:


void lcd_init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ca:	48aa      	ldr	r0, [pc, #680]	@ (8001b74 <lcd_init+0x2b4>)
 80018cc:	f002 fa96 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018d4:	f001 ffc0 	bl	8003858 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018de:	48a5      	ldr	r0, [pc, #660]	@ (8001b74 <lcd_init+0x2b4>)
 80018e0:	f002 fa8c 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018e8:	f001 ffb6 	bl	8003858 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff ffc3 	bl	8001878 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80018f2:	20d3      	movs	r0, #211	@ 0xd3
 80018f4:	f7ff fd86 	bl	8001404 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80018f8:	f7ff fda4 	bl	8001444 <LCD_RD_DATA>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	4b9d      	ldr	r3, [pc, #628]	@ (8001b78 <lcd_init+0x2b8>)
 8001902:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001904:	f7ff fd9e 	bl	8001444 <LCD_RD_DATA>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	4b9a      	ldr	r3, [pc, #616]	@ (8001b78 <lcd_init+0x2b8>)
 800190e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001910:	f7ff fd98 	bl	8001444 <LCD_RD_DATA>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b97      	ldr	r3, [pc, #604]	@ (8001b78 <lcd_init+0x2b8>)
 800191a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800191c:	4b96      	ldr	r3, [pc, #600]	@ (8001b78 <lcd_init+0x2b8>)
 800191e:	889b      	ldrh	r3, [r3, #4]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b94      	ldr	r3, [pc, #592]	@ (8001b78 <lcd_init+0x2b8>)
 8001926:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001928:	f7ff fd8c 	bl	8001444 <LCD_RD_DATA>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	4b91      	ldr	r3, [pc, #580]	@ (8001b78 <lcd_init+0x2b8>)
 8001932:	889b      	ldrh	r3, [r3, #4]
 8001934:	4313      	orrs	r3, r2
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b8f      	ldr	r3, [pc, #572]	@ (8001b78 <lcd_init+0x2b8>)
 800193a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800193c:	20cf      	movs	r0, #207	@ 0xcf
 800193e:	f7ff fd61 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fd6e 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001948:	20c1      	movs	r0, #193	@ 0xc1
 800194a:	f7ff fd6b 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800194e:	2030      	movs	r0, #48	@ 0x30
 8001950:	f7ff fd68 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001954:	20ed      	movs	r0, #237	@ 0xed
 8001956:	f7ff fd55 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800195a:	2064      	movs	r0, #100	@ 0x64
 800195c:	f7ff fd62 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001960:	2003      	movs	r0, #3
 8001962:	f7ff fd5f 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001966:	2012      	movs	r0, #18
 8001968:	f7ff fd5c 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800196c:	2081      	movs	r0, #129	@ 0x81
 800196e:	f7ff fd59 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001972:	20e8      	movs	r0, #232	@ 0xe8
 8001974:	f7ff fd46 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001978:	2085      	movs	r0, #133	@ 0x85
 800197a:	f7ff fd53 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800197e:	2010      	movs	r0, #16
 8001980:	f7ff fd50 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001984:	207a      	movs	r0, #122	@ 0x7a
 8001986:	f7ff fd4d 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800198a:	20cb      	movs	r0, #203	@ 0xcb
 800198c:	f7ff fd3a 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001990:	2039      	movs	r0, #57	@ 0x39
 8001992:	f7ff fd47 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001996:	202c      	movs	r0, #44	@ 0x2c
 8001998:	f7ff fd44 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fd41 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80019a2:	2034      	movs	r0, #52	@ 0x34
 80019a4:	f7ff fd3e 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80019a8:	2002      	movs	r0, #2
 80019aa:	f7ff fd3b 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80019ae:	20f7      	movs	r0, #247	@ 0xf7
 80019b0:	f7ff fd28 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80019b4:	2020      	movs	r0, #32
 80019b6:	f7ff fd35 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80019ba:	20ea      	movs	r0, #234	@ 0xea
 80019bc:	f7ff fd22 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff fd2f 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff fd2c 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80019cc:	20c0      	movs	r0, #192	@ 0xc0
 80019ce:	f7ff fd19 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80019d2:	201b      	movs	r0, #27
 80019d4:	f7ff fd26 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80019d8:	20c1      	movs	r0, #193	@ 0xc1
 80019da:	f7ff fd13 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fd20 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80019e4:	20c5      	movs	r0, #197	@ 0xc5
 80019e6:	f7ff fd0d 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80019ea:	2030      	movs	r0, #48	@ 0x30
 80019ec:	f7ff fd1a 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80019f0:	2030      	movs	r0, #48	@ 0x30
 80019f2:	f7ff fd17 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80019f6:	20c7      	movs	r0, #199	@ 0xc7
 80019f8:	f7ff fd04 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80019fc:	20b7      	movs	r0, #183	@ 0xb7
 80019fe:	f7ff fd11 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001a02:	2036      	movs	r0, #54	@ 0x36
 8001a04:	f7ff fcfe 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001a08:	2008      	movs	r0, #8
 8001a0a:	f7ff fd0b 	bl	8001424 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001a0e:	203a      	movs	r0, #58	@ 0x3a
 8001a10:	f7ff fcf8 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001a14:	2055      	movs	r0, #85	@ 0x55
 8001a16:	f7ff fd05 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001a1a:	20b1      	movs	r0, #177	@ 0xb1
 8001a1c:	f7ff fcf2 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fcff 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001a26:	201a      	movs	r0, #26
 8001a28:	f7ff fcfc 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001a2c:	20b6      	movs	r0, #182	@ 0xb6
 8001a2e:	f7ff fce9 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001a32:	200a      	movs	r0, #10
 8001a34:	f7ff fcf6 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001a38:	20a2      	movs	r0, #162	@ 0xa2
 8001a3a:	f7ff fcf3 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001a3e:	20f2      	movs	r0, #242	@ 0xf2
 8001a40:	f7ff fce0 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff fced 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001a4a:	2026      	movs	r0, #38	@ 0x26
 8001a4c:	f7ff fcda 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff fce7 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001a56:	20e0      	movs	r0, #224	@ 0xe0
 8001a58:	f7ff fcd4 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001a5c:	200f      	movs	r0, #15
 8001a5e:	f7ff fce1 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001a62:	202a      	movs	r0, #42	@ 0x2a
 8001a64:	f7ff fcde 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001a68:	2028      	movs	r0, #40	@ 0x28
 8001a6a:	f7ff fcdb 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a6e:	2008      	movs	r0, #8
 8001a70:	f7ff fcd8 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001a74:	200e      	movs	r0, #14
 8001a76:	f7ff fcd5 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	f7ff fcd2 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001a80:	2054      	movs	r0, #84	@ 0x54
 8001a82:	f7ff fccf 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001a86:	20a9      	movs	r0, #169	@ 0xa9
 8001a88:	f7ff fccc 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001a8c:	2043      	movs	r0, #67	@ 0x43
 8001a8e:	f7ff fcc9 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001a92:	200a      	movs	r0, #10
 8001a94:	f7ff fcc6 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001a98:	200f      	movs	r0, #15
 8001a9a:	f7ff fcc3 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fcc0 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fcbd 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff fcba 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff fcb7 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001ab6:	20e1      	movs	r0, #225	@ 0xe1
 8001ab8:	f7ff fca4 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fcb1 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001ac2:	2015      	movs	r0, #21
 8001ac4:	f7ff fcae 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001ac8:	2017      	movs	r0, #23
 8001aca:	f7ff fcab 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001ace:	2007      	movs	r0, #7
 8001ad0:	f7ff fca8 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ad4:	2011      	movs	r0, #17
 8001ad6:	f7ff fca5 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001ada:	2006      	movs	r0, #6
 8001adc:	f7ff fca2 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001ae0:	202b      	movs	r0, #43	@ 0x2b
 8001ae2:	f7ff fc9f 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001ae6:	2056      	movs	r0, #86	@ 0x56
 8001ae8:	f7ff fc9c 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001aec:	203c      	movs	r0, #60	@ 0x3c
 8001aee:	f7ff fc99 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001af2:	2005      	movs	r0, #5
 8001af4:	f7ff fc96 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001af8:	2010      	movs	r0, #16
 8001afa:	f7ff fc93 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f7ff fc90 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001b04:	203f      	movs	r0, #63	@ 0x3f
 8001b06:	f7ff fc8d 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001b0a:	203f      	movs	r0, #63	@ 0x3f
 8001b0c:	f7ff fc8a 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001b10:	200f      	movs	r0, #15
 8001b12:	f7ff fc87 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001b16:	202b      	movs	r0, #43	@ 0x2b
 8001b18:	f7ff fc74 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fc81 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fc7e 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff fc7b 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001b2e:	203f      	movs	r0, #63	@ 0x3f
 8001b30:	f7ff fc78 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001b34:	202a      	movs	r0, #42	@ 0x2a
 8001b36:	f7ff fc65 	bl	8001404 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fc72 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fc6f 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff fc6c 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001b4c:	20ef      	movs	r0, #239	@ 0xef
 8001b4e:	f7ff fc69 	bl	8001424 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001b52:	2011      	movs	r0, #17
 8001b54:	f7ff fc56 	bl	8001404 <LCD_WR_REG>
	HAL_Delay(120);
 8001b58:	2078      	movs	r0, #120	@ 0x78
 8001b5a:	f001 fe7d 	bl	8003858 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001b5e:	2029      	movs	r0, #41	@ 0x29
 8001b60:	f7ff fc50 	bl	8001404 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b6a:	4804      	ldr	r0, [pc, #16]	@ (8001b7c <lcd_init+0x2bc>)
 8001b6c:	f002 f946 	bl	8003dfc <HAL_GPIO_WritePin>
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40020800 	.word	0x40020800
 8001b78:	20000114 	.word	0x20000114
 8001b7c:	40020000 	.word	0x40020000

08001b80 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08b      	sub	sp, #44	@ 0x2c
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	81fb      	strh	r3, [r7, #14]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	81bb      	strh	r3, [r7, #12]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001b9e:	e048      	b.n	8001c32 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d145      	bne.n	8001c32 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001ba6:	89fa      	ldrh	r2, [r7, #14]
 8001ba8:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <lcd_ShowStr+0xc4>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc3f      	bgt.n	8001c3c <lcd_ShowStr+0xbc>
 8001bbc:	89ba      	ldrh	r2, [r7, #12]
 8001bbe:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <lcd_ShowStr+0xc4>)
 8001bc0:	885b      	ldrh	r3, [r3, #2]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bc8:	1acb      	subs	r3, r1, r3
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dc36      	bgt.n	8001c3c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b80      	cmp	r3, #128	@ 0x80
 8001bd4:	d902      	bls.n	8001bdc <lcd_ShowStr+0x5c>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
 8001bda:	e02a      	b.n	8001c32 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b0d      	cmp	r3, #13
 8001be2:	d10b      	bne.n	8001bfc <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001be4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	89bb      	ldrh	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001bf0:	8abb      	ldrh	r3, [r7, #20]
 8001bf2:	81fb      	strh	r3, [r7, #14]
					str++;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	e017      	b.n	8001c2c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	88fc      	ldrh	r4, [r7, #6]
 8001c02:	89b9      	ldrh	r1, [r7, #12]
 8001c04:	89f8      	ldrh	r0, [r7, #14]
 8001c06:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4623      	mov	r3, r4
 8001c18:	f7ff fcc4 	bl	80015a4 <lcd_ShowChar>
					x+=sizey/2;
 8001c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	89fb      	ldrh	r3, [r7, #14]
 8001c28:	4413      	add	r3, r2
 8001c2a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1b2      	bne.n	8001ba0 <lcd_ShowStr+0x20>
 8001c3a:	e000      	b.n	8001c3e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001c3c:	bf00      	nop
			}
		}
	}
}
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	20000114 	.word	0x20000114

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4c:	f001 fd92 	bl	8003774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c50:	f000 f810 	bl	8001c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c54:	f7ff fa68 	bl	8001128 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c58:	f001 fcb2 	bl	80035c0 <MX_TIM2_Init>
  MX_FSMC_Init();
 8001c5c:	f7ff f994 	bl	8000f88 <MX_FSMC_Init>
  MX_SPI1_Init();
 8001c60:	f001 fb82 	bl	8003368 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001c64:	f7ff fb58 	bl	8001318 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001c68:	f001 fc5e 	bl	8003528 <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  system_loop();
 8001c6c:	f001 fc7e 	bl	800356c <system_loop>
 8001c70:	e7fc      	b.n	8001c6c <main+0x24>
	...

08001c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b094      	sub	sp, #80	@ 0x50
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	2230      	movs	r2, #48	@ 0x30
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 f848 	bl	8006d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <SystemClock_Config+0xcc>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	4a27      	ldr	r2, [pc, #156]	@ (8001d40 <SystemClock_Config+0xcc>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <SystemClock_Config+0xcc>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <SystemClock_Config+0xd0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <SystemClock_Config+0xd0>)
 8001cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <SystemClock_Config+0xd0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd8:	2310      	movs	r3, #16
 8001cda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ce8:	23a8      	movs	r3, #168	@ 0xa8
 8001cea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 f987 	bl	800500c <HAL_RCC_OscConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d04:	f000 f820 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d08:	230f      	movs	r3, #15
 8001d0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2105      	movs	r1, #5
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fbe8 	bl	80054fc <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d32:	f000 f809 	bl	8001d48 <Error_Handler>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3750      	adds	r7, #80	@ 0x50
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <Error_Handler+0x8>

08001d54 <alarm>:
/*
 * @brief:	alarm function when value of clock is equal to value of alarm
 * @para:	none
 * @retval:	none
 * */
void alarm(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af04      	add	r7, sp, #16
	if (ala_year == buf_year && ala_mon == buf_mon && ala_date == buf_date
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <alarm+0x8c>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <alarm+0x90>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d12c      	bne.n	8001dc0 <alarm+0x6c>
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <alarm+0x94>)
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <alarm+0x98>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d126      	bne.n	8001dc0 <alarm+0x6c>
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <alarm+0x9c>)
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <alarm+0xa0>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d120      	bne.n	8001dc0 <alarm+0x6c>
			&& ala_day == buf_day && ala_hour == buf_hour
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <alarm+0xa4>)
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <alarm+0xa8>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d11a      	bne.n	8001dc0 <alarm+0x6c>
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <alarm+0xac>)
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <alarm+0xb0>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d114      	bne.n	8001dc0 <alarm+0x6c>
			&& ala_min == buf_min) {
 8001d96:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <alarm+0xb4>)
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <alarm+0xb8>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d10e      	bne.n	8001dc0 <alarm+0x6c>
		lcd_ShowStr(10, 200, "WAKE UP", WHITE, RED, 24, 0);
 8001da2:	2300      	movs	r3, #0
 8001da4:	9302      	str	r3, [sp, #8]
 8001da6:	2318      	movs	r3, #24
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001db4:	4a16      	ldr	r2, [pc, #88]	@ (8001e10 <alarm+0xbc>)
 8001db6:	21c8      	movs	r1, #200	@ 0xc8
 8001db8:	200a      	movs	r0, #10
 8001dba:	f7ff fee1 	bl	8001b80 <lcd_ShowStr>
 8001dbe:	e00c      	b.n	8001dda <alarm+0x86>
	}
	else{
		lcd_ShowStr(10, 200, "WAKE UP", BLACK, BLACK, 24, 0);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	2318      	movs	r3, #24
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <alarm+0xbc>)
 8001dd0:	21c8      	movs	r1, #200	@ 0xc8
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f7ff fed4 	bl	8001b80 <lcd_ShowStr>
	}
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2000000c 	.word	0x2000000c
 8001de4:	20000006 	.word	0x20000006
 8001de8:	2000000b 	.word	0x2000000b
 8001dec:	20000005 	.word	0x20000005
 8001df0:	2000000a 	.word	0x2000000a
 8001df4:	20000004 	.word	0x20000004
 8001df8:	20000009 	.word	0x20000009
 8001dfc:	20000003 	.word	0x20000003
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000002 	.word	0x20000002
 8001e08:	20000007 	.word	0x20000007
 8001e0c:	20000001 	.word	0x20000001
 8001e10:	08006d88 	.word	0x08006d88

08001e14 <fsm_clock>:
/*
 * @brief:	top-layer state machine of clock
 * @para:	none
 * @retval:	none
 * */
void fsm_clock(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	switch (st_clock) {
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <fsm_clock+0x48>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d014      	beq.n	8001e4a <fsm_clock+0x36>
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	dc16      	bgt.n	8001e52 <fsm_clock+0x3e>
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <fsm_clock+0x1a>
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d009      	beq.n	8001e40 <fsm_clock+0x2c>
 8001e2c:	e011      	b.n	8001e52 <fsm_clock+0x3e>
	case DISPLAY:
		update_clock();
 8001e2e:	f000 fe4d 	bl	8002acc <update_clock>
		display_all_clock();
 8001e32:	f000 fe8b 	bl	8002b4c <display_all_clock>

		alarm();
 8001e36:	f7ff ff8d 	bl	8001d54 <alarm>
		button0_fsm();
 8001e3a:	f000 fbb5 	bl	80025a8 <button0_fsm>
		break;
 8001e3e:	e008      	b.n	8001e52 <fsm_clock+0x3e>
	case CHANGE_TIME:
		fsm_changing();
 8001e40:	f000 f9ba 	bl	80021b8 <fsm_changing>
		button0_fsm();
 8001e44:	f000 fbb0 	bl	80025a8 <button0_fsm>
		break;
 8001e48:	e003      	b.n	8001e52 <fsm_clock+0x3e>
	case ALARM:
		fsm_alarm();
 8001e4a:	f000 f809 	bl	8001e60 <fsm_alarm>
		button0_fsm();
 8001e4e:	f000 fbab 	bl	80025a8 <button0_fsm>
	}
	display_mode();
 8001e52:	f000 feb7 	bl	8002bc4 <display_mode>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000011a 	.word	0x2000011a

08001e60 <fsm_alarm>:
/*
 * @brief:	blinking number, changing buffer of alarm
 * @para:	none
 * @retval:	none
 * */
void fsm_alarm(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	switch (st_changing) {
 8001e64:	4bb9      	ldr	r3, [pc, #740]	@ (800214c <fsm_alarm+0x2ec>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b06      	cmp	r3, #6
 8001e6a:	f200 819e 	bhi.w	80021aa <fsm_alarm+0x34a>
 8001e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e74 <fsm_alarm+0x14>)
 8001e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e74:	08001e91 	.word	0x08001e91
 8001e78:	08001ea1 	.word	0x08001ea1
 8001e7c:	08001f1d 	.word	0x08001f1d
 8001e80:	08001f99 	.word	0x08001f99
 8001e84:	08002015 	.word	0x08002015
 8001e88:	08002091 	.word	0x08002091
 8001e8c:	0800210d 	.word	0x0800210d
	case SECOND:
		// no set alarm on second
		dis_sec(1, 0);
 8001e90:	2100      	movs	r1, #0
 8001e92:	2001      	movs	r0, #1
 8001e94:	f000 ff4a 	bl	8002d2c <dis_sec>
		st_changing = MINUTE;
 8001e98:	4bac      	ldr	r3, [pc, #688]	@ (800214c <fsm_alarm+0x2ec>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
		break;
 8001e9e:	e184      	b.n	80021aa <fsm_alarm+0x34a>
	case MINUTE:
		//blinking number
		switch (st_blinking) {
 8001ea0:	4bab      	ldr	r3, [pc, #684]	@ (8002150 <fsm_alarm+0x2f0>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <fsm_alarm+0x4e>
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d018      	beq.n	8001ede <fsm_alarm+0x7e>
 8001eac:	e030      	b.n	8001f10 <fsm_alarm+0xb0>
		case ON:
			dis_min(ala_min, 1);
 8001eae:	4ba9      	ldr	r3, [pc, #676]	@ (8002154 <fsm_alarm+0x2f4>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 ff7b 	bl	8002db0 <dis_min>
			if (!is_timer_on(1)) {
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f001 fa44 	bl	8003348 <is_timer_on>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f083 0301 	eor.w	r3, r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <fsm_alarm+0xae>
				st_blinking = OFF;
 8001ecc:	4ba0      	ldr	r3, [pc, #640]	@ (8002150 <fsm_alarm+0x2f0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8001ed2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f001 f9d8 	bl	800328c <set_timer>
			}
			break;
 8001edc:	e017      	b.n	8001f0e <fsm_alarm+0xae>
		case OFF:
			dis_min(ala_min, 0);
 8001ede:	4b9d      	ldr	r3, [pc, #628]	@ (8002154 <fsm_alarm+0x2f4>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 ff63 	bl	8002db0 <dis_min>
			if (!is_timer_on(1)) {
 8001eea:	2001      	movs	r0, #1
 8001eec:	f001 fa2c 	bl	8003348 <is_timer_on>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f083 0301 	eor.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <fsm_alarm+0xb0>
				st_blinking = ON;
 8001efc:	4b94      	ldr	r3, [pc, #592]	@ (8002150 <fsm_alarm+0x2f0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8001f02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f06:	2001      	movs	r0, #1
 8001f08:	f001 f9c0 	bl	800328c <set_timer>
 8001f0c:	e000      	b.n	8001f10 <fsm_alarm+0xb0>
			break;
 8001f0e:	bf00      	nop
			}
		}
		//set value
		button1_fsm(&ala_min);
 8001f10:	4890      	ldr	r0, [pc, #576]	@ (8002154 <fsm_alarm+0x2f4>)
 8001f12:	f000 fd33 	bl	800297c <button1_fsm>
		button2_fsm();
 8001f16:	f000 fb9f 	bl	8002658 <button2_fsm>
		break;
 8001f1a:	e146      	b.n	80021aa <fsm_alarm+0x34a>
	case HOUR:
		switch (st_blinking) {
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002150 <fsm_alarm+0x2f0>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <fsm_alarm+0xca>
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d018      	beq.n	8001f5a <fsm_alarm+0xfa>
 8001f28:	e030      	b.n	8001f8c <fsm_alarm+0x12c>
		case ON:
			dis_hour(ala_hour, 1);
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002158 <fsm_alarm+0x2f8>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 ff7f 	bl	8002e34 <dis_hour>
			if (!is_timer_on(1)) {
 8001f36:	2001      	movs	r0, #1
 8001f38:	f001 fa06 	bl	8003348 <is_timer_on>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f083 0301 	eor.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <fsm_alarm+0x12a>
				st_blinking = OFF;
 8001f48:	4b81      	ldr	r3, [pc, #516]	@ (8002150 <fsm_alarm+0x2f0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8001f4e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f52:	2001      	movs	r0, #1
 8001f54:	f001 f99a 	bl	800328c <set_timer>
			}
			break;
 8001f58:	e017      	b.n	8001f8a <fsm_alarm+0x12a>
		case OFF:
			dis_hour(ala_hour, 0);
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002158 <fsm_alarm+0x2f8>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 ff67 	bl	8002e34 <dis_hour>
			if (!is_timer_on(1)) {
 8001f66:	2001      	movs	r0, #1
 8001f68:	f001 f9ee 	bl	8003348 <is_timer_on>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <fsm_alarm+0x12c>
				st_blinking = ON;
 8001f78:	4b75      	ldr	r3, [pc, #468]	@ (8002150 <fsm_alarm+0x2f0>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8001f7e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f82:	2001      	movs	r0, #1
 8001f84:	f001 f982 	bl	800328c <set_timer>
 8001f88:	e000      	b.n	8001f8c <fsm_alarm+0x12c>
			break;
 8001f8a:	bf00      	nop
			}
		}
		button1_fsm(&ala_hour);
 8001f8c:	4872      	ldr	r0, [pc, #456]	@ (8002158 <fsm_alarm+0x2f8>)
 8001f8e:	f000 fcf5 	bl	800297c <button1_fsm>
		button2_fsm();
 8001f92:	f000 fb61 	bl	8002658 <button2_fsm>
		break;
 8001f96:	e108      	b.n	80021aa <fsm_alarm+0x34a>
	case DAY:
		switch (st_blinking) {
 8001f98:	4b6d      	ldr	r3, [pc, #436]	@ (8002150 <fsm_alarm+0x2f0>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <fsm_alarm+0x146>
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d018      	beq.n	8001fd6 <fsm_alarm+0x176>
 8001fa4:	e030      	b.n	8002008 <fsm_alarm+0x1a8>
		case ON:
			dis_day(ala_day, 1);
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <fsm_alarm+0x2fc>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 ff83 	bl	8002eb8 <dis_day>
			if (!is_timer_on(1)) {
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f001 f9c8 	bl	8003348 <is_timer_on>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <fsm_alarm+0x1a6>
				st_blinking = OFF;
 8001fc4:	4b62      	ldr	r3, [pc, #392]	@ (8002150 <fsm_alarm+0x2f0>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8001fca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f001 f95c 	bl	800328c <set_timer>
			}
			break;
 8001fd4:	e017      	b.n	8002006 <fsm_alarm+0x1a6>
		case OFF:
			dis_day(ala_day, 0);
 8001fd6:	4b61      	ldr	r3, [pc, #388]	@ (800215c <fsm_alarm+0x2fc>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 ff6b 	bl	8002eb8 <dis_day>
			if (!is_timer_on(1)) {
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f001 f9b0 	bl	8003348 <is_timer_on>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <fsm_alarm+0x1a8>
				st_blinking = ON;
 8001ff4:	4b56      	ldr	r3, [pc, #344]	@ (8002150 <fsm_alarm+0x2f0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8001ffa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ffe:	2001      	movs	r0, #1
 8002000:	f001 f944 	bl	800328c <set_timer>
 8002004:	e000      	b.n	8002008 <fsm_alarm+0x1a8>
			break;
 8002006:	bf00      	nop
			}
		}
		button1_fsm(&ala_day);
 8002008:	4854      	ldr	r0, [pc, #336]	@ (800215c <fsm_alarm+0x2fc>)
 800200a:	f000 fcb7 	bl	800297c <button1_fsm>
		button2_fsm();
 800200e:	f000 fb23 	bl	8002658 <button2_fsm>
		break;
 8002012:	e0ca      	b.n	80021aa <fsm_alarm+0x34a>
	case DATE:
		switch (st_blinking) {
 8002014:	4b4e      	ldr	r3, [pc, #312]	@ (8002150 <fsm_alarm+0x2f0>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <fsm_alarm+0x1c2>
 800201c:	2b01      	cmp	r3, #1
 800201e:	d018      	beq.n	8002052 <fsm_alarm+0x1f2>
 8002020:	e030      	b.n	8002084 <fsm_alarm+0x224>
		case ON:
			dis_date(ala_date, 1);
 8002022:	4b4f      	ldr	r3, [pc, #316]	@ (8002160 <fsm_alarm+0x300>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	4618      	mov	r0, r3
 800202a:	f000 ffa3 	bl	8002f74 <dis_date>
			if (!is_timer_on(1)) {
 800202e:	2001      	movs	r0, #1
 8002030:	f001 f98a 	bl	8003348 <is_timer_on>
 8002034:	4603      	mov	r3, r0
 8002036:	f083 0301 	eor.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <fsm_alarm+0x222>
				st_blinking = OFF;
 8002040:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <fsm_alarm+0x2f0>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002046:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800204a:	2001      	movs	r0, #1
 800204c:	f001 f91e 	bl	800328c <set_timer>
			}
			break;
 8002050:	e017      	b.n	8002082 <fsm_alarm+0x222>
		case OFF:
			dis_date(ala_date, 0);
 8002052:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <fsm_alarm+0x300>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f000 ff8b 	bl	8002f74 <dis_date>
			if (!is_timer_on(1)) {
 800205e:	2001      	movs	r0, #1
 8002060:	f001 f972 	bl	8003348 <is_timer_on>
 8002064:	4603      	mov	r3, r0
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <fsm_alarm+0x224>
				st_blinking = ON;
 8002070:	4b37      	ldr	r3, [pc, #220]	@ (8002150 <fsm_alarm+0x2f0>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002076:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800207a:	2001      	movs	r0, #1
 800207c:	f001 f906 	bl	800328c <set_timer>
 8002080:	e000      	b.n	8002084 <fsm_alarm+0x224>
			break;
 8002082:	bf00      	nop
			}
		}
		button1_fsm(&ala_date);
 8002084:	4836      	ldr	r0, [pc, #216]	@ (8002160 <fsm_alarm+0x300>)
 8002086:	f000 fc79 	bl	800297c <button1_fsm>
		button2_fsm();
 800208a:	f000 fae5 	bl	8002658 <button2_fsm>
		break;
 800208e:	e08c      	b.n	80021aa <fsm_alarm+0x34a>
	case MONTH:
		switch (st_blinking) {
 8002090:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <fsm_alarm+0x2f0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <fsm_alarm+0x23e>
 8002098:	2b01      	cmp	r3, #1
 800209a:	d018      	beq.n	80020ce <fsm_alarm+0x26e>
 800209c:	e030      	b.n	8002100 <fsm_alarm+0x2a0>
		case ON:
			dis_month(ala_mon, 1);
 800209e:	4b31      	ldr	r3, [pc, #196]	@ (8002164 <fsm_alarm+0x304>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 ffa7 	bl	8002ff8 <dis_month>
			if (!is_timer_on(1)) {
 80020aa:	2001      	movs	r0, #1
 80020ac:	f001 f94c 	bl	8003348 <is_timer_on>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <fsm_alarm+0x29e>
				st_blinking = OFF;
 80020bc:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <fsm_alarm+0x2f0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80020c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020c6:	2001      	movs	r0, #1
 80020c8:	f001 f8e0 	bl	800328c <set_timer>
			}
			break;
 80020cc:	e017      	b.n	80020fe <fsm_alarm+0x29e>
		case OFF:
			dis_month(ala_mon, 0);
 80020ce:	4b25      	ldr	r3, [pc, #148]	@ (8002164 <fsm_alarm+0x304>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 ff8f 	bl	8002ff8 <dis_month>
			if (!is_timer_on(1)) {
 80020da:	2001      	movs	r0, #1
 80020dc:	f001 f934 	bl	8003348 <is_timer_on>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f083 0301 	eor.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <fsm_alarm+0x2a0>
				st_blinking = ON;
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <fsm_alarm+0x2f0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80020f2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020f6:	2001      	movs	r0, #1
 80020f8:	f001 f8c8 	bl	800328c <set_timer>
 80020fc:	e000      	b.n	8002100 <fsm_alarm+0x2a0>
			break;
 80020fe:	bf00      	nop
			}
		}
		button1_fsm(&ala_mon);
 8002100:	4818      	ldr	r0, [pc, #96]	@ (8002164 <fsm_alarm+0x304>)
 8002102:	f000 fc3b 	bl	800297c <button1_fsm>
		button2_fsm();
 8002106:	f000 faa7 	bl	8002658 <button2_fsm>
		break;
 800210a:	e04e      	b.n	80021aa <fsm_alarm+0x34a>
	case YEAR:
		switch (st_blinking) {
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <fsm_alarm+0x2f0>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <fsm_alarm+0x2ba>
 8002114:	2b01      	cmp	r3, #1
 8002116:	d029      	beq.n	800216c <fsm_alarm+0x30c>
 8002118:	e041      	b.n	800219e <fsm_alarm+0x33e>
		case ON:
			dis_year(ala_year, 1);
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <fsm_alarm+0x308>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f000 ffab 	bl	800307c <dis_year>
			if (!is_timer_on(1)) {
 8002126:	2001      	movs	r0, #1
 8002128:	f001 f90e 	bl	8003348 <is_timer_on>
 800212c:	4603      	mov	r3, r0
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d031      	beq.n	800219c <fsm_alarm+0x33c>
				st_blinking = OFF;
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <fsm_alarm+0x2f0>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800213e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002142:	2001      	movs	r0, #1
 8002144:	f001 f8a2 	bl	800328c <set_timer>
			}
			break;
 8002148:	e028      	b.n	800219c <fsm_alarm+0x33c>
 800214a:	bf00      	nop
 800214c:	2000011f 	.word	0x2000011f
 8002150:	20000120 	.word	0x20000120
 8002154:	20000007 	.word	0x20000007
 8002158:	20000008 	.word	0x20000008
 800215c:	20000009 	.word	0x20000009
 8002160:	2000000a 	.word	0x2000000a
 8002164:	2000000b 	.word	0x2000000b
 8002168:	2000000c 	.word	0x2000000c
		case OFF:
			dis_year(ala_year, 0);
 800216c:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <fsm_alarm+0x350>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f000 ff82 	bl	800307c <dis_year>
			if (!is_timer_on(1)) {
 8002178:	2001      	movs	r0, #1
 800217a:	f001 f8e5 	bl	8003348 <is_timer_on>
 800217e:	4603      	mov	r3, r0
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <fsm_alarm+0x33e>
				st_blinking = ON;
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <fsm_alarm+0x354>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002190:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002194:	2001      	movs	r0, #1
 8002196:	f001 f879 	bl	800328c <set_timer>
 800219a:	e000      	b.n	800219e <fsm_alarm+0x33e>
			break;
 800219c:	bf00      	nop
			}
		}
		button1_fsm(&ala_year);
 800219e:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <fsm_alarm+0x350>)
 80021a0:	f000 fbec 	bl	800297c <button1_fsm>
		button2_fsm();
 80021a4:	f000 fa58 	bl	8002658 <button2_fsm>
	}
}
 80021a8:	e7ff      	b.n	80021aa <fsm_alarm+0x34a>
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000000c 	.word	0x2000000c
 80021b4:	20000120 	.word	0x20000120

080021b8 <fsm_changing>:
/*
 * @brief:	blinking number, changing buffer of clock
 * @para:	none
 * @retval:	none
 * */
void fsm_changing(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	switch (st_changing) {
 80021bc:	4bb5      	ldr	r3, [pc, #724]	@ (8002494 <fsm_changing+0x2dc>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b06      	cmp	r3, #6
 80021c2:	f200 81d4 	bhi.w	800256e <fsm_changing+0x3b6>
 80021c6:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <fsm_changing+0x14>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021e9 	.word	0x080021e9
 80021d0:	08002265 	.word	0x08002265
 80021d4:	080022e1 	.word	0x080022e1
 80021d8:	0800235d 	.word	0x0800235d
 80021dc:	080023d9 	.word	0x080023d9
 80021e0:	08002455 	.word	0x08002455
 80021e4:	080024f3 	.word	0x080024f3
	case SECOND:
		//blinking number
		switch (st_blinking) {
 80021e8:	4bab      	ldr	r3, [pc, #684]	@ (8002498 <fsm_changing+0x2e0>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <fsm_changing+0x3e>
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d018      	beq.n	8002226 <fsm_changing+0x6e>
 80021f4:	e030      	b.n	8002258 <fsm_changing+0xa0>
		case ON:
			dis_sec(buf_sec, 1);
 80021f6:	4ba9      	ldr	r3, [pc, #676]	@ (800249c <fsm_changing+0x2e4>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2101      	movs	r1, #1
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fd95 	bl	8002d2c <dis_sec>
			if (!is_timer_on(1)) {
 8002202:	2001      	movs	r0, #1
 8002204:	f001 f8a0 	bl	8003348 <is_timer_on>
 8002208:	4603      	mov	r3, r0
 800220a:	f083 0301 	eor.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <fsm_changing+0x9e>
				st_blinking = OFF;
 8002214:	4ba0      	ldr	r3, [pc, #640]	@ (8002498 <fsm_changing+0x2e0>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800221a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800221e:	2001      	movs	r0, #1
 8002220:	f001 f834 	bl	800328c <set_timer>
			}
			break;
 8002224:	e017      	b.n	8002256 <fsm_changing+0x9e>
		case OFF:
			dis_sec(buf_sec, 0);
 8002226:	4b9d      	ldr	r3, [pc, #628]	@ (800249c <fsm_changing+0x2e4>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fd7d 	bl	8002d2c <dis_sec>
			if (!is_timer_on(1)) {
 8002232:	2001      	movs	r0, #1
 8002234:	f001 f888 	bl	8003348 <is_timer_on>
 8002238:	4603      	mov	r3, r0
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <fsm_changing+0xa0>
				st_blinking = ON;
 8002244:	4b94      	ldr	r3, [pc, #592]	@ (8002498 <fsm_changing+0x2e0>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800224a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800224e:	2001      	movs	r0, #1
 8002250:	f001 f81c 	bl	800328c <set_timer>
 8002254:	e000      	b.n	8002258 <fsm_changing+0xa0>
			break;
 8002256:	bf00      	nop
			}
		}
		button1_fsm(&buf_sec);
 8002258:	4890      	ldr	r0, [pc, #576]	@ (800249c <fsm_changing+0x2e4>)
 800225a:	f000 fb8f 	bl	800297c <button1_fsm>
		button2_fsm();
 800225e:	f000 f9fb 	bl	8002658 <button2_fsm>
		break;
 8002262:	e184      	b.n	800256e <fsm_changing+0x3b6>
	case MINUTE:
		switch (st_blinking) {
 8002264:	4b8c      	ldr	r3, [pc, #560]	@ (8002498 <fsm_changing+0x2e0>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <fsm_changing+0xba>
 800226c:	2b01      	cmp	r3, #1
 800226e:	d018      	beq.n	80022a2 <fsm_changing+0xea>
 8002270:	e030      	b.n	80022d4 <fsm_changing+0x11c>
		case ON:
			dis_min(buf_min, 1);
 8002272:	4b8b      	ldr	r3, [pc, #556]	@ (80024a0 <fsm_changing+0x2e8>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fd99 	bl	8002db0 <dis_min>
			if (!is_timer_on(1)) {
 800227e:	2001      	movs	r0, #1
 8002280:	f001 f862 	bl	8003348 <is_timer_on>
 8002284:	4603      	mov	r3, r0
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <fsm_changing+0x11a>
				st_blinking = OFF;
 8002290:	4b81      	ldr	r3, [pc, #516]	@ (8002498 <fsm_changing+0x2e0>)
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002296:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800229a:	2001      	movs	r0, #1
 800229c:	f000 fff6 	bl	800328c <set_timer>
			}
			break;
 80022a0:	e017      	b.n	80022d2 <fsm_changing+0x11a>
		case OFF:
			dis_min(buf_min, 0);
 80022a2:	4b7f      	ldr	r3, [pc, #508]	@ (80024a0 <fsm_changing+0x2e8>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fd81 	bl	8002db0 <dis_min>
			if (!is_timer_on(1)) {
 80022ae:	2001      	movs	r0, #1
 80022b0:	f001 f84a 	bl	8003348 <is_timer_on>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <fsm_changing+0x11c>
				st_blinking = ON;
 80022c0:	4b75      	ldr	r3, [pc, #468]	@ (8002498 <fsm_changing+0x2e0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80022c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022ca:	2001      	movs	r0, #1
 80022cc:	f000 ffde 	bl	800328c <set_timer>
 80022d0:	e000      	b.n	80022d4 <fsm_changing+0x11c>
			break;
 80022d2:	bf00      	nop
			}
		}
		button1_fsm(&buf_min);
 80022d4:	4872      	ldr	r0, [pc, #456]	@ (80024a0 <fsm_changing+0x2e8>)
 80022d6:	f000 fb51 	bl	800297c <button1_fsm>
		button2_fsm();
 80022da:	f000 f9bd 	bl	8002658 <button2_fsm>
		break;
 80022de:	e146      	b.n	800256e <fsm_changing+0x3b6>
	case HOUR:
		switch (st_blinking) {
 80022e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002498 <fsm_changing+0x2e0>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <fsm_changing+0x136>
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d018      	beq.n	800231e <fsm_changing+0x166>
 80022ec:	e030      	b.n	8002350 <fsm_changing+0x198>
		case ON:
			dis_hour(buf_hour, 1);
 80022ee:	4b6d      	ldr	r3, [pc, #436]	@ (80024a4 <fsm_changing+0x2ec>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fd9d 	bl	8002e34 <dis_hour>
			if (!is_timer_on(1)) {
 80022fa:	2001      	movs	r0, #1
 80022fc:	f001 f824 	bl	8003348 <is_timer_on>
 8002300:	4603      	mov	r3, r0
 8002302:	f083 0301 	eor.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <fsm_changing+0x196>
				st_blinking = OFF;
 800230c:	4b62      	ldr	r3, [pc, #392]	@ (8002498 <fsm_changing+0x2e0>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002312:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002316:	2001      	movs	r0, #1
 8002318:	f000 ffb8 	bl	800328c <set_timer>
			}
			break;
 800231c:	e017      	b.n	800234e <fsm_changing+0x196>
		case OFF:
			dis_hour(buf_hour, 0);
 800231e:	4b61      	ldr	r3, [pc, #388]	@ (80024a4 <fsm_changing+0x2ec>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd85 	bl	8002e34 <dis_hour>
			if (!is_timer_on(1)) {
 800232a:	2001      	movs	r0, #1
 800232c:	f001 f80c 	bl	8003348 <is_timer_on>
 8002330:	4603      	mov	r3, r0
 8002332:	f083 0301 	eor.w	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <fsm_changing+0x198>
				st_blinking = ON;
 800233c:	4b56      	ldr	r3, [pc, #344]	@ (8002498 <fsm_changing+0x2e0>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002342:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002346:	2001      	movs	r0, #1
 8002348:	f000 ffa0 	bl	800328c <set_timer>
 800234c:	e000      	b.n	8002350 <fsm_changing+0x198>
			break;
 800234e:	bf00      	nop
			}
		}
		button1_fsm(&buf_hour);
 8002350:	4854      	ldr	r0, [pc, #336]	@ (80024a4 <fsm_changing+0x2ec>)
 8002352:	f000 fb13 	bl	800297c <button1_fsm>
		button2_fsm();
 8002356:	f000 f97f 	bl	8002658 <button2_fsm>
		break;
 800235a:	e108      	b.n	800256e <fsm_changing+0x3b6>
	case DAY:
		switch (st_blinking) {
 800235c:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <fsm_changing+0x2e0>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <fsm_changing+0x1b2>
 8002364:	2b01      	cmp	r3, #1
 8002366:	d018      	beq.n	800239a <fsm_changing+0x1e2>
 8002368:	e030      	b.n	80023cc <fsm_changing+0x214>
		case ON:
			dis_day(buf_day, 1);
 800236a:	4b4f      	ldr	r3, [pc, #316]	@ (80024a8 <fsm_changing+0x2f0>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2101      	movs	r1, #1
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fda1 	bl	8002eb8 <dis_day>
			if (!is_timer_on(1)) {
 8002376:	2001      	movs	r0, #1
 8002378:	f000 ffe6 	bl	8003348 <is_timer_on>
 800237c:	4603      	mov	r3, r0
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <fsm_changing+0x212>
				st_blinking = OFF;
 8002388:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <fsm_changing+0x2e0>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800238e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002392:	2001      	movs	r0, #1
 8002394:	f000 ff7a 	bl	800328c <set_timer>
			}
			break;
 8002398:	e017      	b.n	80023ca <fsm_changing+0x212>
		case OFF:
			dis_day(buf_day, 0);
 800239a:	4b43      	ldr	r3, [pc, #268]	@ (80024a8 <fsm_changing+0x2f0>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fd89 	bl	8002eb8 <dis_day>
			if (!is_timer_on(1)) {
 80023a6:	2001      	movs	r0, #1
 80023a8:	f000 ffce 	bl	8003348 <is_timer_on>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f083 0301 	eor.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <fsm_changing+0x214>
				st_blinking = ON;
 80023b8:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <fsm_changing+0x2e0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80023be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 ff62 	bl	800328c <set_timer>
 80023c8:	e000      	b.n	80023cc <fsm_changing+0x214>
			break;
 80023ca:	bf00      	nop
			}
		}
		button1_fsm(&buf_day);
 80023cc:	4836      	ldr	r0, [pc, #216]	@ (80024a8 <fsm_changing+0x2f0>)
 80023ce:	f000 fad5 	bl	800297c <button1_fsm>
		button2_fsm();
 80023d2:	f000 f941 	bl	8002658 <button2_fsm>
		break;
 80023d6:	e0ca      	b.n	800256e <fsm_changing+0x3b6>
	case DATE:
		switch (st_blinking) {
 80023d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <fsm_changing+0x2e0>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <fsm_changing+0x22e>
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d018      	beq.n	8002416 <fsm_changing+0x25e>
 80023e4:	e030      	b.n	8002448 <fsm_changing+0x290>
		case ON:
			dis_date(buf_date, 1);
 80023e6:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <fsm_changing+0x2f4>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fdc1 	bl	8002f74 <dis_date>
			if (!is_timer_on(1)) {
 80023f2:	2001      	movs	r0, #1
 80023f4:	f000 ffa8 	bl	8003348 <is_timer_on>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f083 0301 	eor.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <fsm_changing+0x28e>
				st_blinking = OFF;
 8002404:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <fsm_changing+0x2e0>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800240a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800240e:	2001      	movs	r0, #1
 8002410:	f000 ff3c 	bl	800328c <set_timer>
			}
			break;
 8002414:	e017      	b.n	8002446 <fsm_changing+0x28e>
		case OFF:
			dis_date(buf_date, 0);
 8002416:	4b25      	ldr	r3, [pc, #148]	@ (80024ac <fsm_changing+0x2f4>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fda9 	bl	8002f74 <dis_date>
			if (!is_timer_on(1)) {
 8002422:	2001      	movs	r0, #1
 8002424:	f000 ff90 	bl	8003348 <is_timer_on>
 8002428:	4603      	mov	r3, r0
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <fsm_changing+0x290>
				st_blinking = ON;
 8002434:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <fsm_changing+0x2e0>)
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800243a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800243e:	2001      	movs	r0, #1
 8002440:	f000 ff24 	bl	800328c <set_timer>
 8002444:	e000      	b.n	8002448 <fsm_changing+0x290>
			break;
 8002446:	bf00      	nop
			}
		}
		button1_fsm(&buf_date);
 8002448:	4818      	ldr	r0, [pc, #96]	@ (80024ac <fsm_changing+0x2f4>)
 800244a:	f000 fa97 	bl	800297c <button1_fsm>
		button2_fsm();
 800244e:	f000 f903 	bl	8002658 <button2_fsm>
		break;
 8002452:	e08c      	b.n	800256e <fsm_changing+0x3b6>
	case MONTH:
		switch (st_blinking) {
 8002454:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <fsm_changing+0x2e0>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <fsm_changing+0x2aa>
 800245c:	2b01      	cmp	r3, #1
 800245e:	d029      	beq.n	80024b4 <fsm_changing+0x2fc>
 8002460:	e041      	b.n	80024e6 <fsm_changing+0x32e>
		case ON:
			dis_month(buf_mon, 1);
 8002462:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <fsm_changing+0x2f8>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fdc5 	bl	8002ff8 <dis_month>
			if (!is_timer_on(1)) {
 800246e:	2001      	movs	r0, #1
 8002470:	f000 ff6a 	bl	8003348 <is_timer_on>
 8002474:	4603      	mov	r3, r0
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d031      	beq.n	80024e4 <fsm_changing+0x32c>
				st_blinking = OFF;
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <fsm_changing+0x2e0>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002486:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800248a:	2001      	movs	r0, #1
 800248c:	f000 fefe 	bl	800328c <set_timer>
			}
			break;
 8002490:	e028      	b.n	80024e4 <fsm_changing+0x32c>
 8002492:	bf00      	nop
 8002494:	2000011f 	.word	0x2000011f
 8002498:	20000120 	.word	0x20000120
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000001 	.word	0x20000001
 80024a4:	20000002 	.word	0x20000002
 80024a8:	20000003 	.word	0x20000003
 80024ac:	20000004 	.word	0x20000004
 80024b0:	20000005 	.word	0x20000005
		case OFF:
			dis_month(buf_mon, 0);
 80024b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002574 <fsm_changing+0x3bc>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fd9c 	bl	8002ff8 <dis_month>
			if (!is_timer_on(1)) {
 80024c0:	2001      	movs	r0, #1
 80024c2:	f000 ff41 	bl	8003348 <is_timer_on>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f083 0301 	eor.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <fsm_changing+0x32e>
				st_blinking = ON;
 80024d2:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <fsm_changing+0x3c0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80024d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024dc:	2001      	movs	r0, #1
 80024de:	f000 fed5 	bl	800328c <set_timer>
 80024e2:	e000      	b.n	80024e6 <fsm_changing+0x32e>
			break;
 80024e4:	bf00      	nop
			}
		}
		button1_fsm(&buf_mon);
 80024e6:	4823      	ldr	r0, [pc, #140]	@ (8002574 <fsm_changing+0x3bc>)
 80024e8:	f000 fa48 	bl	800297c <button1_fsm>
		button2_fsm();
 80024ec:	f000 f8b4 	bl	8002658 <button2_fsm>
		break;
 80024f0:	e03d      	b.n	800256e <fsm_changing+0x3b6>
	case YEAR:
		switch (st_blinking) {
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <fsm_changing+0x3c0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <fsm_changing+0x348>
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d018      	beq.n	8002530 <fsm_changing+0x378>
 80024fe:	e030      	b.n	8002562 <fsm_changing+0x3aa>
		case ON:
			dis_year(buf_year, 1);
 8002500:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <fsm_changing+0x3c4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fdb8 	bl	800307c <dis_year>
			if (!is_timer_on(1)) {
 800250c:	2001      	movs	r0, #1
 800250e:	f000 ff1b 	bl	8003348 <is_timer_on>
 8002512:	4603      	mov	r3, r0
 8002514:	f083 0301 	eor.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d020      	beq.n	8002560 <fsm_changing+0x3a8>
				st_blinking = OFF;
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <fsm_changing+0x3c0>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002524:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002528:	2001      	movs	r0, #1
 800252a:	f000 feaf 	bl	800328c <set_timer>
			}
			break;
 800252e:	e017      	b.n	8002560 <fsm_changing+0x3a8>
		case OFF:
			dis_year(buf_year, 0);
 8002530:	4b12      	ldr	r3, [pc, #72]	@ (800257c <fsm_changing+0x3c4>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fda0 	bl	800307c <dis_year>
			if (!is_timer_on(1)) {
 800253c:	2001      	movs	r0, #1
 800253e:	f000 ff03 	bl	8003348 <is_timer_on>
 8002542:	4603      	mov	r3, r0
 8002544:	f083 0301 	eor.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <fsm_changing+0x3aa>
				st_blinking = ON;
 800254e:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <fsm_changing+0x3c0>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002554:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002558:	2001      	movs	r0, #1
 800255a:	f000 fe97 	bl	800328c <set_timer>
 800255e:	e000      	b.n	8002562 <fsm_changing+0x3aa>
			break;
 8002560:	bf00      	nop
			}
		}
		button1_fsm(&buf_year);
 8002562:	4806      	ldr	r0, [pc, #24]	@ (800257c <fsm_changing+0x3c4>)
 8002564:	f000 fa0a 	bl	800297c <button1_fsm>
		button2_fsm();
 8002568:	f000 f876 	bl	8002658 <button2_fsm>
	}
}
 800256c:	e7ff      	b.n	800256e <fsm_changing+0x3b6>
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000005 	.word	0x20000005
 8002578:	20000120 	.word	0x20000120
 800257c:	20000006 	.word	0x20000006

08002580 <reset_str>:
/*
 * @brief:	reset the string when transitioning mode
 * @para:	none
 * @retval:	none
 * */
void reset_str(void){
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af04      	add	r7, sp, #16
	lcd_ShowStr(20, 30, "MODE: CHANGE TIME", BLACK, BLACK, 24, 0);
 8002586:	2300      	movs	r3, #0
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	2318      	movs	r3, #24
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2300      	movs	r3, #0
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2300      	movs	r3, #0
 8002594:	4a03      	ldr	r2, [pc, #12]	@ (80025a4 <reset_str+0x24>)
 8002596:	211e      	movs	r1, #30
 8002598:	2014      	movs	r0, #20
 800259a:	f7ff faf1 	bl	8001b80 <lcd_ShowStr>
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	08006d90 	.word	0x08006d90

080025a8 <button0_fsm>:
 * @brief:	mode button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button0_fsm(void) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	switch (button_st[0]) {
 80025ac:	4b27      	ldr	r3, [pc, #156]	@ (800264c <button0_fsm+0xa4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <button0_fsm+0x12>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d034      	beq.n	8002622 <button0_fsm+0x7a>
 80025b8:	e042      	b.n	8002640 <button0_fsm+0x98>
	case release:
		if (is_button_pressed(0) == 1) {
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fbe2 	bl	8000d84 <is_button_pressed>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d025      	beq.n	8002612 <button0_fsm+0x6a>
			// to do
			switch (st_clock) {
 80025c6:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <button0_fsm+0xa8>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d018      	beq.n	8002600 <button0_fsm+0x58>
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	dc19      	bgt.n	8002606 <button0_fsm+0x5e>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <button0_fsm+0x34>
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d009      	beq.n	80025ee <button0_fsm+0x46>
 80025da:	e014      	b.n	8002606 <button0_fsm+0x5e>
			case DISPLAY:
				display_all_clock();
 80025dc:	f000 fab6 	bl	8002b4c <display_all_clock>
				st_clock = CHANGE_TIME;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <button0_fsm+0xa8>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
				st_changing = SECOND;
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <button0_fsm+0xac>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
				break;
 80025ec:	e00b      	b.n	8002606 <button0_fsm+0x5e>
			case CHANGE_TIME:
				display_all_alarm();
 80025ee:	f000 fb2f 	bl	8002c50 <display_all_alarm>
				st_changing = SECOND;
 80025f2:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <button0_fsm+0xac>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
				st_clock = ALARM;
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <button0_fsm+0xa8>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	701a      	strb	r2, [r3, #0]
				break;
 80025fe:	e002      	b.n	8002606 <button0_fsm+0x5e>
			case ALARM:
				st_clock = DISPLAY;
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <button0_fsm+0xa8>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
			}
			reset_str();
 8002606:	f7ff ffbb 	bl	8002580 <reset_str>
			button_st[0] = pressed;
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <button0_fsm+0xa4>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
		} else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 8002610:	e018      	b.n	8002644 <button0_fsm+0x9c>
		} else if (is_button_pressed(0) == ERROR)
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fbb6 	bl	8000d84 <is_button_pressed>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d012      	beq.n	8002644 <button0_fsm+0x9c>
			return 0;
 800261e:	2300      	movs	r3, #0
 8002620:	e012      	b.n	8002648 <button0_fsm+0xa0>
	case pressed:
		if (!is_button_pressed(0)) {
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe fbae 	bl	8000d84 <is_button_pressed>
 8002628:	4603      	mov	r3, r0
 800262a:	f083 0301 	eor.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <button0_fsm+0x94>
			button_st[0] = release;
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <button0_fsm+0xa4>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
		} else {
			return 0;
		}
		break;
 800263a:	e004      	b.n	8002646 <button0_fsm+0x9e>
			return 0;
 800263c:	2300      	movs	r3, #0
 800263e:	e003      	b.n	8002648 <button0_fsm+0xa0>
	default:
		return 0;
 8002640:	2300      	movs	r3, #0
 8002642:	e001      	b.n	8002648 <button0_fsm+0xa0>
		break;
 8002644:	bf00      	nop
	}
	return 1;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	2000011c 	.word	0x2000011c
 8002650:	2000011a 	.word	0x2000011a
 8002654:	2000011f 	.word	0x2000011f

08002658 <button2_fsm>:
 * @brief:	set value button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button2_fsm(void) {
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	switch (button_st[2]) {
 800265c:	4b62      	ldr	r3, [pc, #392]	@ (80027e8 <button2_fsm+0x190>)
 800265e:	789b      	ldrb	r3, [r3, #2]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <button2_fsm+0x14>
 8002664:	2b01      	cmp	r3, #1
 8002666:	f000 80a9 	beq.w	80027bc <button2_fsm+0x164>
 800266a:	e0b6      	b.n	80027da <button2_fsm+0x182>
	case release:
		if (is_button_pressed(12) == 1) {
 800266c:	200c      	movs	r0, #12
 800266e:	f7fe fb89 	bl	8000d84 <is_button_pressed>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8099 	beq.w	80027ac <button2_fsm+0x154>
			// to do
			if (st_clock == CHANGE_TIME) {
 800267a:	4b5c      	ldr	r3, [pc, #368]	@ (80027ec <button2_fsm+0x194>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d15d      	bne.n	800273e <button2_fsm+0xe6>
				switch (st_changing) {
 8002682:	4b5b      	ldr	r3, [pc, #364]	@ (80027f0 <button2_fsm+0x198>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b06      	cmp	r3, #6
 8002688:	d856      	bhi.n	8002738 <button2_fsm+0xe0>
 800268a:	a201      	add	r2, pc, #4	@ (adr r2, 8002690 <button2_fsm+0x38>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026ad 	.word	0x080026ad
 8002694:	080026c1 	.word	0x080026c1
 8002698:	080026d5 	.word	0x080026d5
 800269c:	080026e9 	.word	0x080026e9
 80026a0:	08002725 	.word	0x08002725
 80026a4:	08002711 	.word	0x08002711
 80026a8:	080026fd 	.word	0x080026fd
				case SECOND:

					ds3231_Write(ADDRESS_SEC, buf_sec);
 80026ac:	4b51      	ldr	r3, [pc, #324]	@ (80027f4 <button2_fsm+0x19c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7fe fbe2 	bl	8000e7c <ds3231_Write>
					st_changing = MINUTE;
 80026b8:	4b4d      	ldr	r3, [pc, #308]	@ (80027f0 <button2_fsm+0x198>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
					break;
 80026be:	e03b      	b.n	8002738 <button2_fsm+0xe0>
				case MINUTE:
					ds3231_Write(ADDRESS_MIN, buf_min);
 80026c0:	4b4d      	ldr	r3, [pc, #308]	@ (80027f8 <button2_fsm+0x1a0>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7fe fbd8 	bl	8000e7c <ds3231_Write>
					st_changing = HOUR;
 80026cc:	4b48      	ldr	r3, [pc, #288]	@ (80027f0 <button2_fsm+0x198>)
 80026ce:	2202      	movs	r2, #2
 80026d0:	701a      	strb	r2, [r3, #0]
					break;
 80026d2:	e031      	b.n	8002738 <button2_fsm+0xe0>
				case HOUR:
					ds3231_Write(ADDRESS_HOUR, buf_hour);
 80026d4:	4b49      	ldr	r3, [pc, #292]	@ (80027fc <button2_fsm+0x1a4>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	2002      	movs	r0, #2
 80026dc:	f7fe fbce 	bl	8000e7c <ds3231_Write>
					st_changing = DAY;
 80026e0:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <button2_fsm+0x198>)
 80026e2:	2203      	movs	r2, #3
 80026e4:	701a      	strb	r2, [r3, #0]
					break;
 80026e6:	e027      	b.n	8002738 <button2_fsm+0xe0>
				case DAY:
					ds3231_Write(ADDRESS_DAY, buf_day);
 80026e8:	4b45      	ldr	r3, [pc, #276]	@ (8002800 <button2_fsm+0x1a8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	2003      	movs	r0, #3
 80026f0:	f7fe fbc4 	bl	8000e7c <ds3231_Write>
					st_changing = YEAR;
 80026f4:	4b3e      	ldr	r3, [pc, #248]	@ (80027f0 <button2_fsm+0x198>)
 80026f6:	2206      	movs	r2, #6
 80026f8:	701a      	strb	r2, [r3, #0]
					break;
 80026fa:	e01d      	b.n	8002738 <button2_fsm+0xe0>
				case YEAR:
					ds3231_Write(ADDRESS_YEAR, buf_year);
 80026fc:	4b41      	ldr	r3, [pc, #260]	@ (8002804 <button2_fsm+0x1ac>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4619      	mov	r1, r3
 8002702:	2006      	movs	r0, #6
 8002704:	f7fe fbba 	bl	8000e7c <ds3231_Write>
					st_changing = MONTH;
 8002708:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <button2_fsm+0x198>)
 800270a:	2205      	movs	r2, #5
 800270c:	701a      	strb	r2, [r3, #0]
					break;
 800270e:	e013      	b.n	8002738 <button2_fsm+0xe0>
				case MONTH:
					ds3231_Write(ADDRESS_MONTH, buf_mon);
 8002710:	4b3d      	ldr	r3, [pc, #244]	@ (8002808 <button2_fsm+0x1b0>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	2005      	movs	r0, #5
 8002718:	f7fe fbb0 	bl	8000e7c <ds3231_Write>
					st_changing = DATE;
 800271c:	4b34      	ldr	r3, [pc, #208]	@ (80027f0 <button2_fsm+0x198>)
 800271e:	2204      	movs	r2, #4
 8002720:	701a      	strb	r2, [r3, #0]
					break;
 8002722:	e009      	b.n	8002738 <button2_fsm+0xe0>
				case DATE:
					ds3231_Write(ADDRESS_DATE, buf_date);
 8002724:	4b39      	ldr	r3, [pc, #228]	@ (800280c <button2_fsm+0x1b4>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	2004      	movs	r0, #4
 800272c:	f7fe fba6 	bl	8000e7c <ds3231_Write>
					st_changing = SECOND;
 8002730:	4b2f      	ldr	r3, [pc, #188]	@ (80027f0 <button2_fsm+0x198>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
					break;
 8002736:	bf00      	nop
				}
				display_all_clock();
 8002738:	f000 fa08 	bl	8002b4c <display_all_clock>
 800273c:	e032      	b.n	80027a4 <button2_fsm+0x14c>
			} else {
				switch (st_changing) {
 800273e:	4b2c      	ldr	r3, [pc, #176]	@ (80027f0 <button2_fsm+0x198>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b06      	cmp	r3, #6
 8002744:	d82c      	bhi.n	80027a0 <button2_fsm+0x148>
 8002746:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <button2_fsm+0xf4>)
 8002748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274c:	08002769 	.word	0x08002769
 8002750:	08002771 	.word	0x08002771
 8002754:	08002779 	.word	0x08002779
 8002758:	08002781 	.word	0x08002781
 800275c:	08002799 	.word	0x08002799
 8002760:	08002791 	.word	0x08002791
 8002764:	08002789 	.word	0x08002789
				case SECOND:
					st_changing = MINUTE;
 8002768:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <button2_fsm+0x198>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
					break;
 800276e:	e017      	b.n	80027a0 <button2_fsm+0x148>
				case MINUTE:
					st_changing = HOUR;
 8002770:	4b1f      	ldr	r3, [pc, #124]	@ (80027f0 <button2_fsm+0x198>)
 8002772:	2202      	movs	r2, #2
 8002774:	701a      	strb	r2, [r3, #0]
					break;
 8002776:	e013      	b.n	80027a0 <button2_fsm+0x148>
				case HOUR:
					st_changing = DAY;
 8002778:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <button2_fsm+0x198>)
 800277a:	2203      	movs	r2, #3
 800277c:	701a      	strb	r2, [r3, #0]
					break;
 800277e:	e00f      	b.n	80027a0 <button2_fsm+0x148>
				case DAY:
					st_changing = YEAR;
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <button2_fsm+0x198>)
 8002782:	2206      	movs	r2, #6
 8002784:	701a      	strb	r2, [r3, #0]
					break;
 8002786:	e00b      	b.n	80027a0 <button2_fsm+0x148>
				case YEAR:
					st_changing = MONTH;
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <button2_fsm+0x198>)
 800278a:	2205      	movs	r2, #5
 800278c:	701a      	strb	r2, [r3, #0]
					break;
 800278e:	e007      	b.n	80027a0 <button2_fsm+0x148>
				case MONTH:
					st_changing = DATE;
 8002790:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <button2_fsm+0x198>)
 8002792:	2204      	movs	r2, #4
 8002794:	701a      	strb	r2, [r3, #0]
					break;
 8002796:	e003      	b.n	80027a0 <button2_fsm+0x148>
				case DATE:
					st_changing = SECOND;
 8002798:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <button2_fsm+0x198>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
					break;
 800279e:	bf00      	nop
				}
				display_all_alarm();
 80027a0:	f000 fa56 	bl	8002c50 <display_all_alarm>
			}
			button_st[2] = pressed;
 80027a4:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <button2_fsm+0x190>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	709a      	strb	r2, [r3, #2]
		} else if (is_button_pressed(12) == ERROR)
			return 0;
		break;
 80027aa:	e018      	b.n	80027de <button2_fsm+0x186>
		} else if (is_button_pressed(12) == ERROR)
 80027ac:	200c      	movs	r0, #12
 80027ae:	f7fe fae9 	bl	8000d84 <is_button_pressed>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d012      	beq.n	80027de <button2_fsm+0x186>
			return 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e012      	b.n	80027e2 <button2_fsm+0x18a>
	case pressed:
		if (!is_button_pressed(12)) {
 80027bc:	200c      	movs	r0, #12
 80027be:	f7fe fae1 	bl	8000d84 <is_button_pressed>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f083 0301 	eor.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <button2_fsm+0x17e>
			button_st[2] = release;
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <button2_fsm+0x190>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	709a      	strb	r2, [r3, #2]
		} else {
			return 0;
		}
		break;
 80027d4:	e004      	b.n	80027e0 <button2_fsm+0x188>
			return 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e003      	b.n	80027e2 <button2_fsm+0x18a>
	default:
		return 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	e001      	b.n	80027e2 <button2_fsm+0x18a>
		break;
 80027de:	bf00      	nop
	}
	return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000011c 	.word	0x2000011c
 80027ec:	2000011a 	.word	0x2000011a
 80027f0:	2000011f 	.word	0x2000011f
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000001 	.word	0x20000001
 80027fc:	20000002 	.word	0x20000002
 8002800:	20000003 	.word	0x20000003
 8002804:	20000006 	.word	0x20000006
 8002808:	20000005 	.word	0x20000005
 800280c:	20000004 	.word	0x20000004

08002810 <increase_value>:
/*
 * @brief:	increase the value of number based on conditions
 * @para:	number - the value need to be risen
 * @retval:	none
 * */
void increase_value(uint8_t *number) {
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	switch (st_changing) {
 8002818:	4b55      	ldr	r3, [pc, #340]	@ (8002970 <increase_value+0x160>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b06      	cmp	r3, #6
 800281e:	f200 80a1 	bhi.w	8002964 <increase_value+0x154>
 8002822:	a201      	add	r2, pc, #4	@ (adr r2, 8002828 <increase_value+0x18>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	08002845 	.word	0x08002845
 800282c:	08002845 	.word	0x08002845
 8002830:	08002861 	.word	0x08002861
 8002834:	0800287d 	.word	0x0800287d
 8002838:	080028d1 	.word	0x080028d1
 800283c:	080028b5 	.word	0x080028b5
 8002840:	08002899 	.word	0x08002899
	case SECOND:
	case MINUTE:
		(*number)++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	701a      	strb	r2, [r3, #0]
		if (*number > 59)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b3b      	cmp	r3, #59	@ 0x3b
 8002856:	d97c      	bls.n	8002952 <increase_value+0x142>
			*number = 0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
		break;
 800285e:	e078      	b.n	8002952 <increase_value+0x142>
	case HOUR:
		(*number)++;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	701a      	strb	r2, [r3, #0]
		if (*number > 23)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b17      	cmp	r3, #23
 8002872:	d970      	bls.n	8002956 <increase_value+0x146>
			*number = 0;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
		break;
 800287a:	e06c      	b.n	8002956 <increase_value+0x146>
	case DAY:
		(*number)++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	b2da      	uxtb	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	701a      	strb	r2, [r3, #0]
		if (*number > 7)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b07      	cmp	r3, #7
 800288e:	d964      	bls.n	800295a <increase_value+0x14a>
			*number = 1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
		break;
 8002896:	e060      	b.n	800295a <increase_value+0x14a>
	case YEAR:
		(*number)++;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	701a      	strb	r2, [r3, #0]
		if (*number > 99)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b63      	cmp	r3, #99	@ 0x63
 80028aa:	d958      	bls.n	800295e <increase_value+0x14e>
			*number = 0;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
		break;
 80028b2:	e054      	b.n	800295e <increase_value+0x14e>
	case MONTH:
		(*number)++;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	701a      	strb	r2, [r3, #0]
		if (*number > 12)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d94c      	bls.n	8002962 <increase_value+0x152>
			*number = 1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
		break;
 80028ce:	e048      	b.n	8002962 <increase_value+0x152>
	case DATE:
		(*number)++;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	701a      	strb	r2, [r3, #0]
		uint8_t max_date = 30;
 80028dc:	231e      	movs	r3, #30
 80028de:	73fb      	strb	r3, [r7, #15]
		switch (buf_mon) {
 80028e0:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <increase_value+0x164>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	bf8c      	ite	hi
 80028e8:	2201      	movhi	r2, #1
 80028ea:	2200      	movls	r2, #0
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	2a00      	cmp	r2, #0
 80028f0:	d125      	bne.n	800293e <increase_value+0x12e>
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	f241 53aa 	movw	r3, #5546	@ 0x15aa
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <increase_value+0x10e>
 800290a:	f002 0304 	and.w	r3, r2, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	bf14      	ite	ne
 8002912:	2301      	movne	r3, #1
 8002914:	2300      	moveq	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d103      	bne.n	8002924 <increase_value+0x114>
				max_date = 28;
			else
				max_date = 29;
			break;
		default:
			break;
 800291c:	e00f      	b.n	800293e <increase_value+0x12e>
			max_date = 31;
 800291e:	231f      	movs	r3, #31
 8002920:	73fb      	strb	r3, [r7, #15]
			break;
 8002922:	e00d      	b.n	8002940 <increase_value+0x130>
			if (buf_year % 4)
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <increase_value+0x168>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <increase_value+0x128>
				max_date = 28;
 8002932:	231c      	movs	r3, #28
 8002934:	73fb      	strb	r3, [r7, #15]
			break;
 8002936:	e003      	b.n	8002940 <increase_value+0x130>
				max_date = 29;
 8002938:	231d      	movs	r3, #29
 800293a:	73fb      	strb	r3, [r7, #15]
			break;
 800293c:	e000      	b.n	8002940 <increase_value+0x130>
			break;
 800293e:	bf00      	nop
		}
		if (*number > max_date)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20c      	bcs.n	8002964 <increase_value+0x154>
			*number = 1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]

	}
}
 8002950:	e008      	b.n	8002964 <increase_value+0x154>
		break;
 8002952:	bf00      	nop
 8002954:	e006      	b.n	8002964 <increase_value+0x154>
		break;
 8002956:	bf00      	nop
 8002958:	e004      	b.n	8002964 <increase_value+0x154>
		break;
 800295a:	bf00      	nop
 800295c:	e002      	b.n	8002964 <increase_value+0x154>
		break;
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <increase_value+0x154>
		break;
 8002962:	bf00      	nop
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	2000011f 	.word	0x2000011f
 8002974:	20000005 	.word	0x20000005
 8002978:	20000006 	.word	0x20000006

0800297c <button1_fsm>:
 * @brief:	increasing-value button fsm - 3 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button1_fsm(uint8_t *number) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	switch (button_st[1]) {
 8002984:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <button1_fsm+0xd0>)
 8002986:	785b      	ldrb	r3, [r3, #1]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d034      	beq.n	80029f6 <button1_fsm+0x7a>
 800298c:	2b02      	cmp	r3, #2
 800298e:	dc52      	bgt.n	8002a36 <button1_fsm+0xba>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <button1_fsm+0x1e>
 8002994:	2b01      	cmp	r3, #1
 8002996:	d015      	beq.n	80029c4 <button1_fsm+0x48>
 8002998:	e04d      	b.n	8002a36 <button1_fsm+0xba>
	case release:
		if (is_button_pressed(3) == 1) {
 800299a:	2003      	movs	r0, #3
 800299c:	f7fe f9f2 	bl	8000d84 <is_button_pressed>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <button1_fsm+0x38>
			// to do
			increase_value(number);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ff32 	bl	8002810 <increase_value>
			button_st[1] = pressed;
 80029ac:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <button1_fsm+0xd0>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	705a      	strb	r2, [r3, #1]
		} else if (is_button_pressed(3) == ERROR)
			return 0;
		break;
 80029b2:	e042      	b.n	8002a3a <button1_fsm+0xbe>
		} else if (is_button_pressed(3) == ERROR)
 80029b4:	2003      	movs	r0, #3
 80029b6:	f7fe f9e5 	bl	8000d84 <is_button_pressed>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d03c      	beq.n	8002a3a <button1_fsm+0xbe>
			return 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e03e      	b.n	8002a42 <button1_fsm+0xc6>
	case pressed:
		if (!is_button_pressed(3)) {
 80029c4:	2003      	movs	r0, #3
 80029c6:	f7fe f9dd 	bl	8000d84 <is_button_pressed>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <button1_fsm+0x62>
			button_st[1] = release;
 80029d6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a4c <button1_fsm+0xd0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	705a      	strb	r2, [r3, #1]
		} else if (is_button_long_pressed(3) == 1) {
			button_st[1] = long_pressed;
		} else {
			return 0;
		}
		break;
 80029dc:	e030      	b.n	8002a40 <button1_fsm+0xc4>
		} else if (is_button_long_pressed(3) == 1) {
 80029de:	2003      	movs	r0, #3
 80029e0:	f7fe f9ec 	bl	8000dbc <is_button_long_pressed>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <button1_fsm+0x76>
			button_st[1] = long_pressed;
 80029ea:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <button1_fsm+0xd0>)
 80029ec:	2202      	movs	r2, #2
 80029ee:	705a      	strb	r2, [r3, #1]
		break;
 80029f0:	e026      	b.n	8002a40 <button1_fsm+0xc4>
			return 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e025      	b.n	8002a42 <button1_fsm+0xc6>
	case long_pressed:
		// to do
		st_blinking = ON;
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <button1_fsm+0xd4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
		if (!is_timer_on(2)) {
 80029fc:	2002      	movs	r0, #2
 80029fe:	f000 fca3 	bl	8003348 <is_timer_on>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f083 0301 	eor.w	r3, r3, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <button1_fsm+0xa0>
			increase_value(number);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fefe 	bl	8002810 <increase_value>
			set_timer(2, INCREASE_TIME);
 8002a14:	21c8      	movs	r1, #200	@ 0xc8
 8002a16:	2002      	movs	r0, #2
 8002a18:	f000 fc38 	bl	800328c <set_timer>
		}
		if (!is_button_pressed(3)) {
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	f7fe f9b1 	bl	8000d84 <is_button_pressed>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <button1_fsm+0xc2>
			button_st[1] = release;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <button1_fsm+0xd0>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	705a      	strb	r2, [r3, #1]
		}
		break;
 8002a34:	e003      	b.n	8002a3e <button1_fsm+0xc2>
	default:
		return 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e003      	b.n	8002a42 <button1_fsm+0xc6>
		break;
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <button1_fsm+0xc4>
		break;
 8002a3e:	bf00      	nop
		break;
	}
	return 1;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000011c 	.word	0x2000011c
 8002a50:	20000120 	.word	0x20000120

08002a54 <update_ds3231_register>:
/*
 * @brief:	update the data of ds3231 for initial
 * @para:	none
 * @retval:	none
 * */
void update_ds3231_register(void) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_SEC, buf_sec);
 8002a58:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <update_ds3231_register+0x5c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7fe fa0c 	bl	8000e7c <ds3231_Write>
	ds3231_Write(ADDRESS_YEAR, buf_year);
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <update_ds3231_register+0x60>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	2006      	movs	r0, #6
 8002a6c:	f7fe fa06 	bl	8000e7c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, buf_mon);
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <update_ds3231_register+0x64>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	2005      	movs	r0, #5
 8002a78:	f7fe fa00 	bl	8000e7c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, buf_date);
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <update_ds3231_register+0x68>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	2004      	movs	r0, #4
 8002a84:	f7fe f9fa 	bl	8000e7c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, buf_day);
 8002a88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <update_ds3231_register+0x6c>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	2003      	movs	r0, #3
 8002a90:	f7fe f9f4 	bl	8000e7c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, buf_hour);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <update_ds3231_register+0x70>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	f7fe f9ee 	bl	8000e7c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, buf_min);
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <update_ds3231_register+0x74>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7fe f9e8 	bl	8000e7c <ds3231_Write>

}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	20000006 	.word	0x20000006
 8002ab8:	20000005 	.word	0x20000005
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	20000003 	.word	0x20000003
 8002ac4:	20000002 	.word	0x20000002
 8002ac8:	20000001 	.word	0x20000001

08002acc <update_clock>:
/*
 * @brief:	update the data of clock in display mode
 * @para:	none
 * @retval:	none
 * */
void update_clock(void) {
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
	buf_sec = ds3231_sec;
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <update_clock+0x48>)
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <update_clock+0x4c>)
 8002ad6:	701a      	strb	r2, [r3, #0]
	buf_min = ds3231_min;
 8002ad8:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <update_clock+0x50>)
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <update_clock+0x54>)
 8002ade:	701a      	strb	r2, [r3, #0]
	buf_hour = ds3231_hours;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <update_clock+0x58>)
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <update_clock+0x5c>)
 8002ae6:	701a      	strb	r2, [r3, #0]
	buf_day = ds3231_day;
 8002ae8:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <update_clock+0x60>)
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <update_clock+0x64>)
 8002aee:	701a      	strb	r2, [r3, #0]
	buf_date = ds3231_date;
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <update_clock+0x68>)
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <update_clock+0x6c>)
 8002af6:	701a      	strb	r2, [r3, #0]
	buf_mon = ds3231_month;
 8002af8:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <update_clock+0x70>)
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <update_clock+0x74>)
 8002afe:	701a      	strb	r2, [r3, #0]
	buf_year = ds3231_year;
 8002b00:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <update_clock+0x78>)
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <update_clock+0x7c>)
 8002b06:	701a      	strb	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000065 	.word	0x20000065
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	20000064 	.word	0x20000064
 8002b20:	20000001 	.word	0x20000001
 8002b24:	20000063 	.word	0x20000063
 8002b28:	20000002 	.word	0x20000002
 8002b2c:	20000067 	.word	0x20000067
 8002b30:	20000003 	.word	0x20000003
 8002b34:	20000066 	.word	0x20000066
 8002b38:	20000004 	.word	0x20000004
 8002b3c:	20000068 	.word	0x20000068
 8002b40:	20000005 	.word	0x20000005
 8002b44:	20000069 	.word	0x20000069
 8002b48:	20000006 	.word	0x20000006

08002b4c <display_all_clock>:
/*
 * @brief:	display all data of clock
 * @para:	none
 * @retval:	none
 * */
void display_all_clock(void) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	dis_date(buf_date, 1);
 8002b50:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <display_all_clock+0x5c>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2101      	movs	r1, #1
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fa0c 	bl	8002f74 <dis_date>
	dis_day(buf_day, 1);
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <display_all_clock+0x60>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f9a8 	bl	8002eb8 <dis_day>
	dis_hour(buf_hour, 1);
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <display_all_clock+0x64>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f960 	bl	8002e34 <dis_hour>
	dis_min(buf_min, 1);
 8002b74:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <display_all_clock+0x68>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f918 	bl	8002db0 <dis_min>
	dis_month(buf_mon, 1);
 8002b80:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <display_all_clock+0x6c>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fa36 	bl	8002ff8 <dis_month>
	dis_year(buf_year, 1);
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <display_all_clock+0x70>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fa72 	bl	800307c <dis_year>
	dis_sec(buf_sec, 1);
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <display_all_clock+0x74>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f8c4 	bl	8002d2c <dis_sec>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000004 	.word	0x20000004
 8002bac:	20000003 	.word	0x20000003
 8002bb0:	20000002 	.word	0x20000002
 8002bb4:	20000001 	.word	0x20000001
 8002bb8:	20000005 	.word	0x20000005
 8002bbc:	20000006 	.word	0x20000006
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <display_mode>:
/*
 * @brief:	display the current mode
 * @para:	none
 * @retval:	none
 * */
void display_mode(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af04      	add	r7, sp, #16
	switch (st_clock) {
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <display_mode+0x7c>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d024      	beq.n	8002c1c <display_mode+0x58>
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	dc31      	bgt.n	8002c3a <display_mode+0x76>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <display_mode+0x1c>
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d00f      	beq.n	8002bfe <display_mode+0x3a>
		break;
	case ALARM:
		lcd_ShowStr(20, 30, "MODE: ALARM", WHITE, RED, 24, 0);
		break;
	}
}
 8002bde:	e02c      	b.n	8002c3a <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: DISPLAY", WHITE, RED, 24, 0);
 8002be0:	2300      	movs	r3, #0
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	2318      	movs	r3, #24
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bf2:	4a14      	ldr	r2, [pc, #80]	@ (8002c44 <display_mode+0x80>)
 8002bf4:	211e      	movs	r1, #30
 8002bf6:	2014      	movs	r0, #20
 8002bf8:	f7fe ffc2 	bl	8001b80 <lcd_ShowStr>
		break;
 8002bfc:	e01d      	b.n	8002c3a <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: CHANGE TIME", WHITE, RED, 24, 0);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9302      	str	r3, [sp, #8]
 8002c02:	2318      	movs	r3, #24
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c10:	4a0d      	ldr	r2, [pc, #52]	@ (8002c48 <display_mode+0x84>)
 8002c12:	211e      	movs	r1, #30
 8002c14:	2014      	movs	r0, #20
 8002c16:	f7fe ffb3 	bl	8001b80 <lcd_ShowStr>
		break;
 8002c1a:	e00e      	b.n	8002c3a <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: ALARM", WHITE, RED, 24, 0);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2318      	movs	r3, #24
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c2e:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <display_mode+0x88>)
 8002c30:	211e      	movs	r1, #30
 8002c32:	2014      	movs	r0, #20
 8002c34:	f7fe ffa4 	bl	8001b80 <lcd_ShowStr>
		break;
 8002c38:	bf00      	nop
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	2000011a 	.word	0x2000011a
 8002c44:	08006da4 	.word	0x08006da4
 8002c48:	08006d90 	.word	0x08006d90
 8002c4c:	08006db4 	.word	0x08006db4

08002c50 <display_all_alarm>:
/*
 * @brief:	display all data of alarm
 * @para:	none
 * @retval:	none
 * */
void display_all_alarm(void) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	dis_date(ala_date, 1);
 8002c54:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <display_all_alarm+0x50>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f98a 	bl	8002f74 <dis_date>
	dis_day(ala_day, 1);
 8002c60:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <display_all_alarm+0x54>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f926 	bl	8002eb8 <dis_day>
	dis_hour(ala_hour, 1);
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <display_all_alarm+0x58>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f8de 	bl	8002e34 <dis_hour>
	dis_min(ala_min, 1);
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <display_all_alarm+0x5c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f896 	bl	8002db0 <dis_min>
	dis_month(ala_mon, 1);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <display_all_alarm+0x60>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f9b4 	bl	8002ff8 <dis_month>
	dis_year(ala_year, 1);
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <display_all_alarm+0x64>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f9f0 	bl	800307c <dis_year>
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2000000a 	.word	0x2000000a
 8002ca4:	20000009 	.word	0x20000009
 8002ca8:	20000008 	.word	0x20000008
 8002cac:	20000007 	.word	0x20000007
 8002cb0:	2000000b 	.word	0x2000000b
 8002cb4:	2000000c 	.word	0x2000000c

08002cb8 <init_box>:
	uint8_t x_month;
	uint8_t y_month;
	uint8_t x_year;
	uint8_t y_year;
} box;
void init_box() {
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
	box.text_color = GREEN;
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <init_box+0x70>)
 8002cbe:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002cc2:	601a      	str	r2, [r3, #0]
	box.background_color = BLACK;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <init_box+0x70>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
	box.x_second = 150;
 8002cca:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <init_box+0x70>)
 8002ccc:	2296      	movs	r2, #150	@ 0x96
 8002cce:	721a      	strb	r2, [r3, #8]
	box.y_second = 100;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <init_box+0x70>)
 8002cd2:	2264      	movs	r2, #100	@ 0x64
 8002cd4:	725a      	strb	r2, [r3, #9]
	box.x_minute = 110;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <init_box+0x70>)
 8002cd8:	226e      	movs	r2, #110	@ 0x6e
 8002cda:	729a      	strb	r2, [r3, #10]
	box.y_minute = 100;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <init_box+0x70>)
 8002cde:	2264      	movs	r2, #100	@ 0x64
 8002ce0:	72da      	strb	r2, [r3, #11]
	box.x_hour = 70;
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <init_box+0x70>)
 8002ce4:	2246      	movs	r2, #70	@ 0x46
 8002ce6:	731a      	strb	r2, [r3, #12]
	box.y_hour = 100;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <init_box+0x70>)
 8002cea:	2264      	movs	r2, #100	@ 0x64
 8002cec:	735a      	strb	r2, [r3, #13]
	box.x_day = 20;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <init_box+0x70>)
 8002cf0:	2214      	movs	r2, #20
 8002cf2:	739a      	strb	r2, [r3, #14]
	box.y_day = 154;
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <init_box+0x70>)
 8002cf6:	229a      	movs	r2, #154	@ 0x9a
 8002cf8:	73da      	strb	r2, [r3, #15]
	box.x_date = 70;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <init_box+0x70>)
 8002cfc:	2246      	movs	r2, #70	@ 0x46
 8002cfe:	741a      	strb	r2, [r3, #16]
	box.y_date = 154;
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <init_box+0x70>)
 8002d02:	229a      	movs	r2, #154	@ 0x9a
 8002d04:	745a      	strb	r2, [r3, #17]
	box.x_month = 110;
 8002d06:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <init_box+0x70>)
 8002d08:	226e      	movs	r2, #110	@ 0x6e
 8002d0a:	749a      	strb	r2, [r3, #18]
	box.y_month = 154;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <init_box+0x70>)
 8002d0e:	229a      	movs	r2, #154	@ 0x9a
 8002d10:	74da      	strb	r2, [r3, #19]
	box.x_year = 150;
 8002d12:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <init_box+0x70>)
 8002d14:	2296      	movs	r2, #150	@ 0x96
 8002d16:	751a      	strb	r2, [r3, #20]
	box.y_year = 154;
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <init_box+0x70>)
 8002d1a:	229a      	movs	r2, #154	@ 0x9a
 8002d1c:	755a      	strb	r2, [r3, #21]
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	20000124 	.word	0x20000124

08002d2c <dis_sec>:
 * @brief  display second in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in seconds area
 * @retval none
 */
void dis_sec(uint8_t number, bool i) {
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af04      	add	r7, sp, #16
 8002d32:	4603      	mov	r3, r0
 8002d34:	460a      	mov	r2, r1
 8002d36:	71fb      	strb	r3, [r7, #7]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71bb      	strb	r3, [r7, #6]
	if (i)
 8002d3c:	79bb      	ldrb	r3, [r7, #6]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <dis_sec+0x48>
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2, box.text_color,
 8002d42:	4b1a      	ldr	r3, [pc, #104]	@ (8002dac <dis_sec+0x80>)
 8002d44:	7a1b      	ldrb	r3, [r3, #8]
 8002d46:	461c      	mov	r4, r3
 8002d48:	4b18      	ldr	r3, [pc, #96]	@ (8002dac <dis_sec+0x80>)
 8002d4a:	7a5b      	ldrb	r3, [r3, #9]
 8002d4c:	461d      	mov	r5, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	b299      	uxth	r1, r3
 8002d52:	4b16      	ldr	r3, [pc, #88]	@ (8002dac <dis_sec+0x80>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002d58:	4a14      	ldr	r2, [pc, #80]	@ (8002dac <dis_sec+0x80>)
 8002d5a:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2, box.text_color,
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	2018      	movs	r0, #24
 8002d60:	9002      	str	r0, [sp, #8]
 8002d62:	9201      	str	r2, [sp, #4]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2302      	movs	r3, #2
 8002d68:	460a      	mov	r2, r1
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7fe fd05 	bl	800177c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
				box.background_color, box.background_color, 24);
}
 8002d72:	e017      	b.n	8002da4 <dis_sec+0x78>
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8002d74:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <dis_sec+0x80>)
 8002d76:	7a1b      	ldrb	r3, [r3, #8]
 8002d78:	461c      	mov	r4, r3
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <dis_sec+0x80>)
 8002d7c:	7a5b      	ldrb	r3, [r3, #9]
 8002d7e:	461d      	mov	r5, r3
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	b299      	uxth	r1, r3
				box.background_color, box.background_color, 24);
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <dis_sec+0x80>)
 8002d86:	685b      	ldr	r3, [r3, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8002d88:	b29b      	uxth	r3, r3
				box.background_color, box.background_color, 24);
 8002d8a:	4a08      	ldr	r2, [pc, #32]	@ (8002dac <dis_sec+0x80>)
 8002d8c:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	2018      	movs	r0, #24
 8002d92:	9002      	str	r0, [sp, #8]
 8002d94:	9201      	str	r2, [sp, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7fe fcec 	bl	800177c <lcd_ShowIntNum>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bdb0      	pop	{r4, r5, r7, pc}
 8002dac:	20000124 	.word	0x20000124

08002db0 <dis_min>:
 * @brief  display minutes in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in minutes area
 * @retval none
 */
void dis_min(uint8_t number, bool i) {
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	4603      	mov	r3, r0
 8002db8:	460a      	mov	r2, r1
 8002dba:	71fb      	strb	r3, [r7, #7]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71bb      	strb	r3, [r7, #6]
	if (i)
 8002dc0:	79bb      	ldrb	r3, [r7, #6]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d018      	beq.n	8002df8 <dis_min+0x48>
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2, box.text_color,
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <dis_min+0x80>)
 8002dc8:	7a9b      	ldrb	r3, [r3, #10]
 8002dca:	461c      	mov	r4, r3
 8002dcc:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <dis_min+0x80>)
 8002dce:	7adb      	ldrb	r3, [r3, #11]
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	4b16      	ldr	r3, [pc, #88]	@ (8002e30 <dis_min+0x80>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002ddc:	4a14      	ldr	r2, [pc, #80]	@ (8002e30 <dis_min+0x80>)
 8002dde:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2, box.text_color,
 8002de0:	b292      	uxth	r2, r2
 8002de2:	2018      	movs	r0, #24
 8002de4:	9002      	str	r0, [sp, #8]
 8002de6:	9201      	str	r2, [sp, #4]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2302      	movs	r3, #2
 8002dec:	460a      	mov	r2, r1
 8002dee:	4629      	mov	r1, r5
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7fe fcc3 	bl	800177c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
				box.background_color, box.background_color, 24);

}
 8002df6:	e017      	b.n	8002e28 <dis_min+0x78>
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8002df8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <dis_min+0x80>)
 8002dfa:	7a9b      	ldrb	r3, [r3, #10]
 8002dfc:	461c      	mov	r4, r3
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <dis_min+0x80>)
 8002e00:	7adb      	ldrb	r3, [r3, #11]
 8002e02:	461d      	mov	r5, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	b299      	uxth	r1, r3
				box.background_color, box.background_color, 24);
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <dis_min+0x80>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8002e0c:	b29b      	uxth	r3, r3
				box.background_color, box.background_color, 24);
 8002e0e:	4a08      	ldr	r2, [pc, #32]	@ (8002e30 <dis_min+0x80>)
 8002e10:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8002e12:	b292      	uxth	r2, r2
 8002e14:	2018      	movs	r0, #24
 8002e16:	9002      	str	r0, [sp, #8]
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	460a      	mov	r2, r1
 8002e20:	4629      	mov	r1, r5
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7fe fcaa 	bl	800177c <lcd_ShowIntNum>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e30:	20000124 	.word	0x20000124

08002e34 <dis_hour>:
 * @brief  display hours in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in hours area
 * @retval none
 */
void dis_hour(uint8_t number, bool i) {
 8002e34:	b5b0      	push	{r4, r5, r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af04      	add	r7, sp, #16
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	71fb      	strb	r3, [r7, #7]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71bb      	strb	r3, [r7, #6]
	if (i)
 8002e44:	79bb      	ldrb	r3, [r7, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d018      	beq.n	8002e7c <dis_hour+0x48>
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.text_color,
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb4 <dis_hour+0x80>)
 8002e4c:	7b1b      	ldrb	r3, [r3, #12]
 8002e4e:	461c      	mov	r4, r3
 8002e50:	4b18      	ldr	r3, [pc, #96]	@ (8002eb4 <dis_hour+0x80>)
 8002e52:	7b5b      	ldrb	r3, [r3, #13]
 8002e54:	461d      	mov	r5, r3
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	b299      	uxth	r1, r3
 8002e5a:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <dis_hour+0x80>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002e60:	4a14      	ldr	r2, [pc, #80]	@ (8002eb4 <dis_hour+0x80>)
 8002e62:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.text_color,
 8002e64:	b292      	uxth	r2, r2
 8002e66:	2018      	movs	r0, #24
 8002e68:	9002      	str	r0, [sp, #8]
 8002e6a:	9201      	str	r2, [sp, #4]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2302      	movs	r3, #2
 8002e70:	460a      	mov	r2, r1
 8002e72:	4629      	mov	r1, r5
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7fe fc81 	bl	800177c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
				box.background_color, 24);
}
 8002e7a:	e017      	b.n	8002eac <dis_hour+0x78>
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <dis_hour+0x80>)
 8002e7e:	7b1b      	ldrb	r3, [r3, #12]
 8002e80:	461c      	mov	r4, r3
 8002e82:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <dis_hour+0x80>)
 8002e84:	7b5b      	ldrb	r3, [r3, #13]
 8002e86:	461d      	mov	r5, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	b299      	uxth	r1, r3
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <dis_hour+0x80>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002e92:	4a08      	ldr	r2, [pc, #32]	@ (8002eb4 <dis_hour+0x80>)
 8002e94:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
 8002e96:	b292      	uxth	r2, r2
 8002e98:	2018      	movs	r0, #24
 8002e9a:	9002      	str	r0, [sp, #8]
 8002e9c:	9201      	str	r2, [sp, #4]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7fe fc68 	bl	800177c <lcd_ShowIntNum>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb4:	20000124 	.word	0x20000124

08002eb8 <dis_day>:
 * @brief  display day in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in day area
 * @retval none
 */
void dis_day(uint8_t number, bool i) {
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af04      	add	r7, sp, #16
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_day, box.y_day - 5, ": Day", box.text_color, box.background_color, 24, 0);
	if (i){
 8002ec8:	79bb      	ldrb	r3, [r7, #6]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d032      	beq.n	8002f34 <dis_day+0x7c>
		if(number != 1)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d018      	beq.n	8002f06 <dis_day+0x4e>
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.text_color,
 8002ed4:	4b25      	ldr	r3, [pc, #148]	@ (8002f6c <dis_day+0xb4>)
 8002ed6:	7b9b      	ldrb	r3, [r3, #14]
 8002ed8:	461c      	mov	r4, r3
 8002eda:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <dis_day+0xb4>)
 8002edc:	7bdb      	ldrb	r3, [r3, #15]
 8002ede:	461d      	mov	r5, r3
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	b299      	uxth	r1, r3
 8002ee4:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <dis_day+0xb4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
						box.background_color, 24);
 8002eea:	4a20      	ldr	r2, [pc, #128]	@ (8002f6c <dis_day+0xb4>)
 8002eec:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.text_color,
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	2018      	movs	r0, #24
 8002ef2:	9002      	str	r0, [sp, #8]
 8002ef4:	9201      	str	r2, [sp, #4]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2302      	movs	r3, #2
 8002efa:	460a      	mov	r2, r1
 8002efc:	4629      	mov	r1, r5
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7fe fc3c 	bl	800177c <lcd_ShowIntNum>
					box.background_color, 24, 0);
	}
	else
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
				box.background_color, 24);
}
 8002f04:	e02e      	b.n	8002f64 <dis_day+0xac>
			lcd_ShowStr(box.x_day, box.y_day, "CN", box.text_color,
 8002f06:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <dis_day+0xb4>)
 8002f08:	7b9b      	ldrb	r3, [r3, #14]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <dis_day+0xb4>)
 8002f0e:	7bdb      	ldrb	r3, [r3, #15]
 8002f10:	461c      	mov	r4, r3
 8002f12:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <dis_day+0xb4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	b29a      	uxth	r2, r3
					box.background_color, 24, 0);
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <dis_day+0xb4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
			lcd_ShowStr(box.x_day, box.y_day, "CN", box.text_color,
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2100      	movs	r1, #0
 8002f20:	9102      	str	r1, [sp, #8]
 8002f22:	2118      	movs	r1, #24
 8002f24:	9101      	str	r1, [sp, #4]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	4a11      	ldr	r2, [pc, #68]	@ (8002f70 <dis_day+0xb8>)
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	f7fe fe27 	bl	8001b80 <lcd_ShowStr>
}
 8002f32:	e017      	b.n	8002f64 <dis_day+0xac>
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
 8002f34:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <dis_day+0xb4>)
 8002f36:	7b9b      	ldrb	r3, [r3, #14]
 8002f38:	461c      	mov	r4, r3
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <dis_day+0xb4>)
 8002f3c:	7bdb      	ldrb	r3, [r3, #15]
 8002f3e:	461d      	mov	r5, r3
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	b299      	uxth	r1, r3
 8002f44:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <dis_day+0xb4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002f4a:	4a08      	ldr	r2, [pc, #32]	@ (8002f6c <dis_day+0xb4>)
 8002f4c:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	2018      	movs	r0, #24
 8002f52:	9002      	str	r0, [sp, #8]
 8002f54:	9201      	str	r2, [sp, #4]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f7fe fc0c 	bl	800177c <lcd_ShowIntNum>
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6c:	20000124 	.word	0x20000124
 8002f70:	08006dc0 	.word	0x08006dc0

08002f74 <dis_date>:
 * @brief  display dates in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in dates area
 * @retval none
 */
void dis_date(uint8_t number, bool i) {
 8002f74:	b5b0      	push	{r4, r5, r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af04      	add	r7, sp, #16
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	460a      	mov	r2, r1
 8002f7e:	71fb      	strb	r3, [r7, #7]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_date, box.y_date - 5, ": Date", box.text_color, box.background_color, 24, 0);
	if (i)
 8002f84:	79bb      	ldrb	r3, [r7, #6]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d018      	beq.n	8002fbc <dis_date+0x48>
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.text_color,
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <dis_date+0x80>)
 8002f8c:	7c1b      	ldrb	r3, [r3, #16]
 8002f8e:	461c      	mov	r4, r3
 8002f90:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <dis_date+0x80>)
 8002f92:	7c5b      	ldrb	r3, [r3, #17]
 8002f94:	461d      	mov	r5, r3
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	b299      	uxth	r1, r3
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <dis_date+0x80>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002fa0:	4a14      	ldr	r2, [pc, #80]	@ (8002ff4 <dis_date+0x80>)
 8002fa2:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.text_color,
 8002fa4:	b292      	uxth	r2, r2
 8002fa6:	2018      	movs	r0, #24
 8002fa8:	9002      	str	r0, [sp, #8]
 8002faa:	9201      	str	r2, [sp, #4]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2302      	movs	r3, #2
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7fe fbe1 	bl	800177c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
				box.background_color, 24);
}
 8002fba:	e017      	b.n	8002fec <dis_date+0x78>
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <dis_date+0x80>)
 8002fbe:	7c1b      	ldrb	r3, [r3, #16]
 8002fc0:	461c      	mov	r4, r3
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <dis_date+0x80>)
 8002fc4:	7c5b      	ldrb	r3, [r3, #17]
 8002fc6:	461d      	mov	r5, r3
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	b299      	uxth	r1, r3
 8002fcc:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <dis_date+0x80>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002fd2:	4a08      	ldr	r2, [pc, #32]	@ (8002ff4 <dis_date+0x80>)
 8002fd4:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	2018      	movs	r0, #24
 8002fda:	9002      	str	r0, [sp, #8]
 8002fdc:	9201      	str	r2, [sp, #4]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	460a      	mov	r2, r1
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f7fe fbc8 	bl	800177c <lcd_ShowIntNum>
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff4:	20000124 	.word	0x20000124

08002ff8 <dis_month>:
 * @brief  display months in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in months area
 * @retval none
 */
void dis_month(uint8_t number, bool i) {
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af04      	add	r7, sp, #16
 8002ffe:	4603      	mov	r3, r0
 8003000:	460a      	mov	r2, r1
 8003002:	71fb      	strb	r3, [r7, #7]
 8003004:	4613      	mov	r3, r2
 8003006:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_month, box.y_month - 5, ": Month", box.text_color, box.background_color, 24, 0);
	if (i)
 8003008:	79bb      	ldrb	r3, [r7, #6]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d018      	beq.n	8003040 <dis_month+0x48>
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.text_color,
 800300e:	4b1a      	ldr	r3, [pc, #104]	@ (8003078 <dis_month+0x80>)
 8003010:	7c9b      	ldrb	r3, [r3, #18]
 8003012:	461c      	mov	r4, r3
 8003014:	4b18      	ldr	r3, [pc, #96]	@ (8003078 <dis_month+0x80>)
 8003016:	7cdb      	ldrb	r3, [r3, #19]
 8003018:	461d      	mov	r5, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	b299      	uxth	r1, r3
 800301e:	4b16      	ldr	r3, [pc, #88]	@ (8003078 <dis_month+0x80>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003024:	4a14      	ldr	r2, [pc, #80]	@ (8003078 <dis_month+0x80>)
 8003026:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.text_color,
 8003028:	b292      	uxth	r2, r2
 800302a:	2018      	movs	r0, #24
 800302c:	9002      	str	r0, [sp, #8]
 800302e:	9201      	str	r2, [sp, #4]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2302      	movs	r3, #2
 8003034:	460a      	mov	r2, r1
 8003036:	4629      	mov	r1, r5
 8003038:	4620      	mov	r0, r4
 800303a:	f7fe fb9f 	bl	800177c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
				box.background_color, 24);
}
 800303e:	e017      	b.n	8003070 <dis_month+0x78>
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
 8003040:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <dis_month+0x80>)
 8003042:	7c9b      	ldrb	r3, [r3, #18]
 8003044:	461c      	mov	r4, r3
 8003046:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <dis_month+0x80>)
 8003048:	7cdb      	ldrb	r3, [r3, #19]
 800304a:	461d      	mov	r5, r3
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	b299      	uxth	r1, r3
 8003050:	4b09      	ldr	r3, [pc, #36]	@ (8003078 <dis_month+0x80>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003056:	4a08      	ldr	r2, [pc, #32]	@ (8003078 <dis_month+0x80>)
 8003058:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
 800305a:	b292      	uxth	r2, r2
 800305c:	2018      	movs	r0, #24
 800305e:	9002      	str	r0, [sp, #8]
 8003060:	9201      	str	r2, [sp, #4]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2302      	movs	r3, #2
 8003066:	460a      	mov	r2, r1
 8003068:	4629      	mov	r1, r5
 800306a:	4620      	mov	r0, r4
 800306c:	f7fe fb86 	bl	800177c <lcd_ShowIntNum>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bdb0      	pop	{r4, r5, r7, pc}
 8003078:	20000124 	.word	0x20000124

0800307c <dis_year>:
 * @brief  display years in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in years area
 * @retval none
 */
void dis_year(uint8_t number, bool i) {
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af04      	add	r7, sp, #16
 8003082:	4603      	mov	r3, r0
 8003084:	460a      	mov	r2, r1
 8003086:	71fb      	strb	r3, [r7, #7]
 8003088:	4613      	mov	r3, r2
 800308a:	71bb      	strb	r3, [r7, #6]
	if (i)
 800308c:	79bb      	ldrb	r3, [r7, #6]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d018      	beq.n	80030c4 <dis_year+0x48>
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.text_color,
 8003092:	4b1a      	ldr	r3, [pc, #104]	@ (80030fc <dis_year+0x80>)
 8003094:	7d1b      	ldrb	r3, [r3, #20]
 8003096:	461c      	mov	r4, r3
 8003098:	4b18      	ldr	r3, [pc, #96]	@ (80030fc <dis_year+0x80>)
 800309a:	7d5b      	ldrb	r3, [r3, #21]
 800309c:	461d      	mov	r5, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	b299      	uxth	r1, r3
 80030a2:	4b16      	ldr	r3, [pc, #88]	@ (80030fc <dis_year+0x80>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80030a8:	4a14      	ldr	r2, [pc, #80]	@ (80030fc <dis_year+0x80>)
 80030aa:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.text_color,
 80030ac:	b292      	uxth	r2, r2
 80030ae:	2018      	movs	r0, #24
 80030b0:	9002      	str	r0, [sp, #8]
 80030b2:	9201      	str	r2, [sp, #4]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2302      	movs	r3, #2
 80030b8:	460a      	mov	r2, r1
 80030ba:	4629      	mov	r1, r5
 80030bc:	4620      	mov	r0, r4
 80030be:	f7fe fb5d 	bl	800177c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
				box.background_color, 24);
}
 80030c2:	e017      	b.n	80030f4 <dis_year+0x78>
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <dis_year+0x80>)
 80030c6:	7d1b      	ldrb	r3, [r3, #20]
 80030c8:	461c      	mov	r4, r3
 80030ca:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <dis_year+0x80>)
 80030cc:	7d5b      	ldrb	r3, [r3, #21]
 80030ce:	461d      	mov	r5, r3
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	b299      	uxth	r1, r3
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <dis_year+0x80>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80030da:	4a08      	ldr	r2, [pc, #32]	@ (80030fc <dis_year+0x80>)
 80030dc:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
 80030de:	b292      	uxth	r2, r2
 80030e0:	2018      	movs	r0, #24
 80030e2:	9002      	str	r0, [sp, #8]
 80030e4:	9201      	str	r2, [sp, #4]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2302      	movs	r3, #2
 80030ea:	460a      	mov	r2, r1
 80030ec:	4629      	mov	r1, r5
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7fe fb44 	bl	800177c <lcd_ShowIntNum>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bdb0      	pop	{r4, r5, r7, pc}
 80030fc:	20000124 	.word	0x20000124

08003100 <display_text>:

void display_text(void){
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b085      	sub	sp, #20
 8003104:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe f9fa 	bl	8001500 <lcd_Clear>

	lcd_ShowStr(box.x_day, box.y_day - 24, "Day", box.text_color, box.background_color, 24, 0);
 800310c:	4b52      	ldr	r3, [pc, #328]	@ (8003258 <display_text+0x158>)
 800310e:	7b9b      	ldrb	r3, [r3, #14]
 8003110:	461c      	mov	r4, r3
 8003112:	4b51      	ldr	r3, [pc, #324]	@ (8003258 <display_text+0x158>)
 8003114:	7bdb      	ldrb	r3, [r3, #15]
 8003116:	3b18      	subs	r3, #24
 8003118:	b299      	uxth	r1, r3
 800311a:	4b4f      	ldr	r3, [pc, #316]	@ (8003258 <display_text+0x158>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b4d      	ldr	r3, [pc, #308]	@ (8003258 <display_text+0x158>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	b29b      	uxth	r3, r3
 8003126:	2000      	movs	r0, #0
 8003128:	9002      	str	r0, [sp, #8]
 800312a:	2018      	movs	r0, #24
 800312c:	9001      	str	r0, [sp, #4]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	4a4a      	ldr	r2, [pc, #296]	@ (800325c <display_text+0x15c>)
 8003134:	4620      	mov	r0, r4
 8003136:	f7fe fd23 	bl	8001b80 <lcd_ShowStr>
	lcd_ShowStr(box.x_second, box.y_second - 24, "sec", box.text_color, box.background_color, 24, 0);
 800313a:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <display_text+0x158>)
 800313c:	7a1b      	ldrb	r3, [r3, #8]
 800313e:	461c      	mov	r4, r3
 8003140:	4b45      	ldr	r3, [pc, #276]	@ (8003258 <display_text+0x158>)
 8003142:	7a5b      	ldrb	r3, [r3, #9]
 8003144:	3b18      	subs	r3, #24
 8003146:	b299      	uxth	r1, r3
 8003148:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <display_text+0x158>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	b29a      	uxth	r2, r3
 800314e:	4b42      	ldr	r3, [pc, #264]	@ (8003258 <display_text+0x158>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	b29b      	uxth	r3, r3
 8003154:	2000      	movs	r0, #0
 8003156:	9002      	str	r0, [sp, #8]
 8003158:	2018      	movs	r0, #24
 800315a:	9001      	str	r0, [sp, #4]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4613      	mov	r3, r2
 8003160:	4a3f      	ldr	r2, [pc, #252]	@ (8003260 <display_text+0x160>)
 8003162:	4620      	mov	r0, r4
 8003164:	f7fe fd0c 	bl	8001b80 <lcd_ShowStr>
	lcd_ShowStr(box.x_minute, box.y_minute - 24, "min", box.text_color, box.background_color, 24, 0);
 8003168:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <display_text+0x158>)
 800316a:	7a9b      	ldrb	r3, [r3, #10]
 800316c:	461c      	mov	r4, r3
 800316e:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <display_text+0x158>)
 8003170:	7adb      	ldrb	r3, [r3, #11]
 8003172:	3b18      	subs	r3, #24
 8003174:	b299      	uxth	r1, r3
 8003176:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <display_text+0x158>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29a      	uxth	r2, r3
 800317c:	4b36      	ldr	r3, [pc, #216]	@ (8003258 <display_text+0x158>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b29b      	uxth	r3, r3
 8003182:	2000      	movs	r0, #0
 8003184:	9002      	str	r0, [sp, #8]
 8003186:	2018      	movs	r0, #24
 8003188:	9001      	str	r0, [sp, #4]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	4a35      	ldr	r2, [pc, #212]	@ (8003264 <display_text+0x164>)
 8003190:	4620      	mov	r0, r4
 8003192:	f7fe fcf5 	bl	8001b80 <lcd_ShowStr>
	lcd_ShowStr(box.x_hour - 24, box.y_hour - 24, "hour", box.text_color, box.background_color, 24, 0);
 8003196:	4b30      	ldr	r3, [pc, #192]	@ (8003258 <display_text+0x158>)
 8003198:	7b1b      	ldrb	r3, [r3, #12]
 800319a:	3b18      	subs	r3, #24
 800319c:	b298      	uxth	r0, r3
 800319e:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <display_text+0x158>)
 80031a0:	7b5b      	ldrb	r3, [r3, #13]
 80031a2:	3b18      	subs	r3, #24
 80031a4:	b299      	uxth	r1, r3
 80031a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003258 <display_text+0x158>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <display_text+0x158>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2400      	movs	r4, #0
 80031b4:	9402      	str	r4, [sp, #8]
 80031b6:	2418      	movs	r4, #24
 80031b8:	9401      	str	r4, [sp, #4]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	4a2a      	ldr	r2, [pc, #168]	@ (8003268 <display_text+0x168>)
 80031c0:	f7fe fcde 	bl	8001b80 <lcd_ShowStr>

	lcd_ShowStr(box.x_date, box.y_date - 24, "DD", box.text_color, box.background_color, 24, 0);
 80031c4:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <display_text+0x158>)
 80031c6:	7c1b      	ldrb	r3, [r3, #16]
 80031c8:	461c      	mov	r4, r3
 80031ca:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <display_text+0x158>)
 80031cc:	7c5b      	ldrb	r3, [r3, #17]
 80031ce:	3b18      	subs	r3, #24
 80031d0:	b299      	uxth	r1, r3
 80031d2:	4b21      	ldr	r3, [pc, #132]	@ (8003258 <display_text+0x158>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003258 <display_text+0x158>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2000      	movs	r0, #0
 80031e0:	9002      	str	r0, [sp, #8]
 80031e2:	2018      	movs	r0, #24
 80031e4:	9001      	str	r0, [sp, #4]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	4a20      	ldr	r2, [pc, #128]	@ (800326c <display_text+0x16c>)
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7fe fcc7 	bl	8001b80 <lcd_ShowStr>
	lcd_ShowStr(box.x_month, box.y_month - 24, "MM", box.text_color, box.background_color, 24, 0);
 80031f2:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <display_text+0x158>)
 80031f4:	7c9b      	ldrb	r3, [r3, #18]
 80031f6:	461c      	mov	r4, r3
 80031f8:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <display_text+0x158>)
 80031fa:	7cdb      	ldrb	r3, [r3, #19]
 80031fc:	3b18      	subs	r3, #24
 80031fe:	b299      	uxth	r1, r3
 8003200:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <display_text+0x158>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b29a      	uxth	r2, r3
 8003206:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <display_text+0x158>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b29b      	uxth	r3, r3
 800320c:	2000      	movs	r0, #0
 800320e:	9002      	str	r0, [sp, #8]
 8003210:	2018      	movs	r0, #24
 8003212:	9001      	str	r0, [sp, #4]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	4a15      	ldr	r2, [pc, #84]	@ (8003270 <display_text+0x170>)
 800321a:	4620      	mov	r0, r4
 800321c:	f7fe fcb0 	bl	8001b80 <lcd_ShowStr>
	lcd_ShowStr(box.x_year, box.y_year - 24, "YY", box.text_color, box.background_color, 24, 0);
 8003220:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <display_text+0x158>)
 8003222:	7d1b      	ldrb	r3, [r3, #20]
 8003224:	461c      	mov	r4, r3
 8003226:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <display_text+0x158>)
 8003228:	7d5b      	ldrb	r3, [r3, #21]
 800322a:	3b18      	subs	r3, #24
 800322c:	b299      	uxth	r1, r3
 800322e:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <display_text+0x158>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <display_text+0x158>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	b29b      	uxth	r3, r3
 800323a:	2000      	movs	r0, #0
 800323c:	9002      	str	r0, [sp, #8]
 800323e:	2018      	movs	r0, #24
 8003240:	9001      	str	r0, [sp, #4]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	4a0b      	ldr	r2, [pc, #44]	@ (8003274 <display_text+0x174>)
 8003248:	4620      	mov	r0, r4
 800324a:	f7fe fc99 	bl	8001b80 <lcd_ShowStr>
}
 800324e:	bf00      	nop
 8003250:	3704      	adds	r7, #4
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	bf00      	nop
 8003258:	20000124 	.word	0x20000124
 800325c:	08006dc4 	.word	0x08006dc4
 8003260:	08006dc8 	.word	0x08006dc8
 8003264:	08006dcc 	.word	0x08006dcc
 8003268:	08006dd0 	.word	0x08006dd0
 800326c:	08006dd8 	.word	0x08006dd8
 8003270:	08006ddc 	.word	0x08006ddc
 8003274:	08006de0 	.word	0x08006de0

08003278 <HAL_TIM_PeriodElapsedCallback>:
/* timer[0]: to read button
 * timer[1]: to blink number
 * timer[2]: to increase number over time
 * */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
	run_timer();
 8003280:	f000 f830 	bl	80032e4 <run_timer>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <set_timer>:
 * @brief:	turn timer on and set value
 * @para:	i: id of timer
 * 			time: unit is ms
 * @retval:	none
 * */
void set_timer(unsigned i, unsigned int time) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f8d3 	bl	800044c <__aeabi_ui2d>
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	4b0c      	ldr	r3, [pc, #48]	@ (80032dc <set_timer+0x50>)
 80032ac:	f7fd fa72 	bl	8000794 <__aeabi_ddiv>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	f7fd fb54 	bl	8000964 <__aeabi_d2uiz>
 80032bc:	4602      	mov	r2, r0
 80032be:	4908      	ldr	r1, [pc, #32]	@ (80032e0 <set_timer+0x54>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 80032c8:	4a05      	ldr	r2, [pc, #20]	@ (80032e0 <set_timer+0x54>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2101      	movs	r1, #1
 80032ce:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	408f4000 	.word	0x408f4000
 80032e0:	2000013c 	.word	0x2000013c

080032e4 <run_timer>:
/*
 * @brief:	run all timers that is on
 * @para:	none
 * @retval:	none
 * */
void run_timer(void) {
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	e01f      	b.n	8003330 <run_timer+0x4c>
		if (timer[i].state) {
 80032f0:	4a14      	ldr	r2, [pc, #80]	@ (8003344 <run_timer+0x60>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <run_timer+0x46>
			timer[i].count--;
 80032fc:	4a11      	ldr	r2, [pc, #68]	@ (8003344 <run_timer+0x60>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	490e      	ldr	r1, [pc, #56]	@ (8003344 <run_timer+0x60>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0) {
 8003312:	4a0c      	ldr	r2, [pc, #48]	@ (8003344 <run_timer+0x60>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <run_timer+0x46>
				timer[i].state = 0;
 8003320:	4a08      	ldr	r2, [pc, #32]	@ (8003344 <run_timer+0x60>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2100      	movs	r1, #0
 8003326:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3301      	adds	r3, #1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d9dc      	bls.n	80032f0 <run_timer+0xc>
			}
		}
	}
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	2000013c 	.word	0x2000013c

08003348 <is_timer_on>:
bool is_timer_on(unsigned i) {
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <is_timer_on+0x1c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	2000013c 	.word	0x2000013c

08003368 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800336c:	4b17      	ldr	r3, [pc, #92]	@ (80033cc <MX_SPI1_Init+0x64>)
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <MX_SPI1_Init+0x68>)
 8003370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003372:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <MX_SPI1_Init+0x64>)
 8003374:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800337a:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <MX_SPI1_Init+0x64>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003380:	4b12      	ldr	r3, [pc, #72]	@ (80033cc <MX_SPI1_Init+0x64>)
 8003382:	2200      	movs	r2, #0
 8003384:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003386:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <MX_SPI1_Init+0x64>)
 8003388:	2200      	movs	r2, #0
 800338a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <MX_SPI1_Init+0x64>)
 800338e:	2200      	movs	r2, #0
 8003390:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <MX_SPI1_Init+0x64>)
 8003394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003398:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800339a:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <MX_SPI1_Init+0x64>)
 800339c:	2200      	movs	r2, #0
 800339e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033a0:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <MX_SPI1_Init+0x64>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033a6:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <MX_SPI1_Init+0x64>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <MX_SPI1_Init+0x64>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <MX_SPI1_Init+0x64>)
 80033b4:	220a      	movs	r2, #10
 80033b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033b8:	4804      	ldr	r0, [pc, #16]	@ (80033cc <MX_SPI1_Init+0x64>)
 80033ba:	f002 faab 	bl	8005914 <HAL_SPI_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033c4:	f7fe fcc0 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000154 	.word	0x20000154
 80033d0:	40013000 	.word	0x40013000

080033d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_SPI_MspInit+0x84>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d12b      	bne.n	800344e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b18      	ldr	r3, [pc, #96]	@ (800345c <HAL_SPI_MspInit+0x88>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	4a17      	ldr	r2, [pc, #92]	@ (800345c <HAL_SPI_MspInit+0x88>)
 8003400:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003404:	6453      	str	r3, [r2, #68]	@ 0x44
 8003406:	4b15      	ldr	r3, [pc, #84]	@ (800345c <HAL_SPI_MspInit+0x88>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b11      	ldr	r3, [pc, #68]	@ (800345c <HAL_SPI_MspInit+0x88>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	4a10      	ldr	r2, [pc, #64]	@ (800345c <HAL_SPI_MspInit+0x88>)
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	6313      	str	r3, [r2, #48]	@ 0x30
 8003422:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <HAL_SPI_MspInit+0x88>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800342e:	2338      	movs	r3, #56	@ 0x38
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800343e:	2305      	movs	r3, #5
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	4805      	ldr	r0, [pc, #20]	@ (8003460 <HAL_SPI_MspInit+0x8c>)
 800344a:	f000 fb3b 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800344e:	bf00      	nop
 8003450:	3728      	adds	r7, #40	@ 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40013000 	.word	0x40013000
 800345c:	40023800 	.word	0x40023800
 8003460:	40020400 	.word	0x40020400

08003464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <HAL_MspInit+0x4c>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	4a0f      	ldr	r2, [pc, #60]	@ (80034b0 <HAL_MspInit+0x4c>)
 8003474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003478:	6453      	str	r3, [r2, #68]	@ 0x44
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <HAL_MspInit+0x4c>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <HAL_MspInit+0x4c>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	4a08      	ldr	r2, [pc, #32]	@ (80034b0 <HAL_MspInit+0x4c>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003494:	6413      	str	r3, [r2, #64]	@ 0x40
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <HAL_MspInit+0x4c>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800

080034b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <NMI_Handler+0x4>

080034bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <HardFault_Handler+0x4>

080034c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <MemManage_Handler+0x4>

080034cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <BusFault_Handler+0x4>

080034d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <UsageFault_Handler+0x4>

080034dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800350a:	f000 f985 	bl	8003818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003518:	4802      	ldr	r0, [pc, #8]	@ (8003524 <TIM2_IRQHandler+0x10>)
 800351a:	f002 ff6b 	bl	80063f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200001ac 	.word	0x200001ac

08003528 <system_init>:
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
}

void system_init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800352c:	480e      	ldr	r0, [pc, #56]	@ (8003568 <system_init+0x40>)
 800352e:	f002 fef1 	bl	8006314 <HAL_TIM_Base_Start_IT>
	set_timer(0, READ_BUTTON_TIME);
 8003532:	210a      	movs	r1, #10
 8003534:	2000      	movs	r0, #0
 8003536:	f7ff fea9 	bl	800328c <set_timer>
	set_timer(1, BLINKING_TIME);
 800353a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800353e:	2001      	movs	r0, #1
 8003540:	f7ff fea4 	bl	800328c <set_timer>
	button_init();
 8003544:	f7fd fba6 	bl	8000c94 <button_init>
	lcd_init();
 8003548:	f7fe f9ba 	bl	80018c0 <lcd_init>
	lcd_Clear(BLACK);
 800354c:	2000      	movs	r0, #0
 800354e:	f7fd ffd7 	bl	8001500 <lcd_Clear>
	ds3231_init();
 8003552:	f7fd fc4f 	bl	8000df4 <ds3231_init>
	init_box();
 8003556:	f7ff fbaf 	bl	8002cb8 <init_box>
	update_ds3231_register();
 800355a:	f7ff fa7b 	bl	8002a54 <update_ds3231_register>
	display_text();
 800355e:	f7ff fdcf 	bl	8003100 <display_text>
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	200001ac 	.word	0x200001ac

0800356c <system_loop>:

void system_loop(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
	if (!is_timer_on(0))
 8003570:	2000      	movs	r0, #0
 8003572:	f7ff fee9 	bl	8003348 <is_timer_on>
 8003576:	4603      	mov	r3, r0
 8003578:	f083 0301 	eor.w	r3, r3, #1
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <system_loop+0x26>
	{
		ds3231_ReadTime();
 8003582:	f7fd fc9d 	bl	8000ec0 <ds3231_ReadTime>
		button_Scan();
 8003586:	f7fd fb91 	bl	8000cac <button_Scan>
		set_timer(0, READ_BUTTON_TIME);
 800358a:	210a      	movs	r1, #10
 800358c:	2000      	movs	r0, #0
 800358e:	f7ff fe7d 	bl	800328c <set_timer>
	}
	fsm_clock();
 8003592:	f7fe fc3f 	bl	8001e14 <fsm_clock>
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a0:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <SystemInit+0x20>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	4a05      	ldr	r2, [pc, #20]	@ (80035bc <SystemInit+0x20>)
 80035a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035c6:	f107 0308 	add.w	r3, r7, #8
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035d4:	463b      	mov	r3, r7
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <MX_TIM2_Init+0x94>)
 80035de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <MX_TIM2_Init+0x94>)
 80035e6:	f240 3247 	movw	r2, #839	@ 0x347
 80035ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ec:	4b19      	ldr	r3, [pc, #100]	@ (8003654 <MX_TIM2_Init+0x94>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80035f2:	4b18      	ldr	r3, [pc, #96]	@ (8003654 <MX_TIM2_Init+0x94>)
 80035f4:	2263      	movs	r2, #99	@ 0x63
 80035f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f8:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <MX_TIM2_Init+0x94>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fe:	4b15      	ldr	r3, [pc, #84]	@ (8003654 <MX_TIM2_Init+0x94>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003604:	4813      	ldr	r0, [pc, #76]	@ (8003654 <MX_TIM2_Init+0x94>)
 8003606:	f002 fe35 	bl	8006274 <HAL_TIM_Base_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003610:	f7fe fb9a 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	4619      	mov	r1, r3
 8003620:	480c      	ldr	r0, [pc, #48]	@ (8003654 <MX_TIM2_Init+0x94>)
 8003622:	f002 ffef 	bl	8006604 <HAL_TIM_ConfigClockSource>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800362c:	f7fe fb8c 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003630:	2300      	movs	r3, #0
 8003632:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003634:	2300      	movs	r3, #0
 8003636:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003638:	463b      	mov	r3, r7
 800363a:	4619      	mov	r1, r3
 800363c:	4805      	ldr	r0, [pc, #20]	@ (8003654 <MX_TIM2_Init+0x94>)
 800363e:	f003 fa0b 	bl	8006a58 <HAL_TIMEx_MasterConfigSynchronization>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003648:	f7fe fb7e 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800364c:	bf00      	nop
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	200001ac 	.word	0x200001ac

08003658 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003668:	d115      	bne.n	8003696 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <HAL_TIM_Base_MspInit+0x48>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	4a0b      	ldr	r2, [pc, #44]	@ (80036a0 <HAL_TIM_Base_MspInit+0x48>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6413      	str	r3, [r2, #64]	@ 0x40
 800367a:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <HAL_TIM_Base_MspInit+0x48>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	201c      	movs	r0, #28
 800368c:	f000 f9e3 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003690:	201c      	movs	r0, #28
 8003692:	f000 f9fc 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	b2db      	uxtb	r3, r3
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	4a0d      	ldr	r2, [pc, #52]	@ (800371c <DEC2BCD+0x44>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	08db      	lsrs	r3, r3, #3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	b258      	sxtb	r0, r3
 80036f2:	79fa      	ldrb	r2, [r7, #7]
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <DEC2BCD+0x44>)
 80036f6:	fba3 1302 	umull	r1, r3, r3, r2
 80036fa:	08d9      	lsrs	r1, r3, #3
 80036fc:	460b      	mov	r3, r1
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	b25b      	sxtb	r3, r3
 800370a:	4303      	orrs	r3, r0
 800370c:	b25b      	sxtb	r3, r3
 800370e:	b2db      	uxtb	r3, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	cccccccd 	.word	0xcccccccd

08003720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003724:	480d      	ldr	r0, [pc, #52]	@ (800375c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003726:	490e      	ldr	r1, [pc, #56]	@ (8003760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003728:	4a0e      	ldr	r2, [pc, #56]	@ (8003764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800372a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800372c:	e002      	b.n	8003734 <LoopCopyDataInit>

0800372e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800372e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003732:	3304      	adds	r3, #4

08003734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003738:	d3f9      	bcc.n	800372e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800373a:	4a0b      	ldr	r2, [pc, #44]	@ (8003768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800373c:	4c0b      	ldr	r4, [pc, #44]	@ (800376c <LoopFillZerobss+0x26>)
  movs r3, #0
 800373e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003740:	e001      	b.n	8003746 <LoopFillZerobss>

08003742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003744:	3204      	adds	r2, #4

08003746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003748:	d3fb      	bcc.n	8003742 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800374a:	f7ff ff27 	bl	800359c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800374e:	f003 faeb 	bl	8006d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003752:	f7fe fa79 	bl	8001c48 <main>
  bx  lr    
 8003756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800375c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003760:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003764:	08009d8c 	.word	0x08009d8c
  ldr r2, =_sbss
 8003768:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800376c:	200001f8 	.word	0x200001f8

08003770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003770:	e7fe      	b.n	8003770 <ADC_IRQHandler>
	...

08003774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003778:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <HAL_Init+0x40>)
 800377e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003784:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_Init+0x40>)
 800378a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800378e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003790:	4b08      	ldr	r3, [pc, #32]	@ (80037b4 <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a07      	ldr	r2, [pc, #28]	@ (80037b4 <HAL_Init+0x40>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379c:	2003      	movs	r0, #3
 800379e:	f000 f94f 	bl	8003a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a2:	200f      	movs	r0, #15
 80037a4:	f000 f808 	bl	80037b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037a8:	f7ff fe5c 	bl	8003464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00

080037b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c0:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_InitTick+0x54>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <HAL_InitTick+0x58>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f967 	bl	8003aaa <HAL_SYSTICK_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00e      	b.n	8003804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b0f      	cmp	r3, #15
 80037ea:	d80a      	bhi.n	8003802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ec:	2200      	movs	r2, #0
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f000 f92f 	bl	8003a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037f8:	4a06      	ldr	r2, [pc, #24]	@ (8003814 <HAL_InitTick+0x5c>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000010 	.word	0x20000010
 8003810:	20000018 	.word	0x20000018
 8003814:	20000014 	.word	0x20000014

08003818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_IncTick+0x20>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_IncTick+0x24>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4413      	add	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	@ (800383c <HAL_IncTick+0x24>)
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000018 	.word	0x20000018
 800383c:	200001f4 	.word	0x200001f4

08003840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return uwTick;
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <HAL_GetTick+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	200001f4 	.word	0x200001f4

08003858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff ffee 	bl	8003840 <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d005      	beq.n	800387e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_Delay+0x44>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800387e:	bf00      	nop
 8003880:	f7ff ffde 	bl	8003840 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d8f7      	bhi.n	8003880 <HAL_Delay+0x28>
  {
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000018 	.word	0x20000018

080038a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038bc:	4013      	ands	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d2:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	60d3      	str	r3, [r2, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <__NVIC_GetPriorityGrouping+0x18>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 0307 	and.w	r3, r3, #7
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db0b      	blt.n	800392e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4907      	ldr	r1, [pc, #28]	@ (800393c <__NVIC_EnableIRQ+0x38>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2001      	movs	r0, #1
 8003926:	fa00 f202 	lsl.w	r2, r0, r2
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000e100 	.word	0xe000e100

08003940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db0a      	blt.n	800396a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	490c      	ldr	r1, [pc, #48]	@ (800398c <__NVIC_SetPriority+0x4c>)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	440b      	add	r3, r1
 8003964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003968:	e00a      	b.n	8003980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4908      	ldr	r1, [pc, #32]	@ (8003990 <__NVIC_SetPriority+0x50>)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3b04      	subs	r3, #4
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	440b      	add	r3, r1
 800397e:	761a      	strb	r2, [r3, #24]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000e100 	.word	0xe000e100
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	@ 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f1c3 0307 	rsb	r3, r3, #7
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	bf28      	it	cs
 80039b2:	2304      	movcs	r3, #4
 80039b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d902      	bls.n	80039c4 <NVIC_EncodePriority+0x30>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3b03      	subs	r3, #3
 80039c2:	e000      	b.n	80039c6 <NVIC_EncodePriority+0x32>
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	401a      	ands	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039dc:	f04f 31ff 	mov.w	r1, #4294967295
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	43d9      	mvns	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	4313      	orrs	r3, r2
         );
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	@ 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a0c:	d301      	bcc.n	8003a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00f      	b.n	8003a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a12:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <SysTick_Config+0x40>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	f7ff ff8e 	bl	8003940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a24:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <SysTick_Config+0x40>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2a:	4b04      	ldr	r3, [pc, #16]	@ (8003a3c <SysTick_Config+0x40>)
 8003a2c:	2207      	movs	r2, #7
 8003a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	e000e010 	.word	0xe000e010

08003a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff29 	bl	80038a0 <__NVIC_SetPriorityGrouping>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a68:	f7ff ff3e 	bl	80038e8 <__NVIC_GetPriorityGrouping>
 8003a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f7ff ff8e 	bl	8003994 <NVIC_EncodePriority>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff5d 	bl	8003940 <__NVIC_SetPriority>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4603      	mov	r3, r0
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff31 	bl	8003904 <__NVIC_EnableIRQ>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffa2 	bl	80039fc <SysTick_Config>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e16b      	b.n	8003db8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	f040 815a 	bne.w	8003db2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d005      	beq.n	8003b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d130      	bne.n	8003b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	2203      	movs	r2, #3
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 0201 	and.w	r2, r3, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d017      	beq.n	8003bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d123      	bne.n	8003c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3208      	adds	r2, #8
 8003bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	69b9      	ldr	r1, [r7, #24]
 8003c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80b4 	beq.w	8003db2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4b60      	ldr	r3, [pc, #384]	@ (8003dd0 <HAL_GPIO_Init+0x30c>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	4a5f      	ldr	r2, [pc, #380]	@ (8003dd0 <HAL_GPIO_Init+0x30c>)
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003dd0 <HAL_GPIO_Init+0x30c>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c66:	4a5b      	ldr	r2, [pc, #364]	@ (8003dd4 <HAL_GPIO_Init+0x310>)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	@ (8003dd8 <HAL_GPIO_Init+0x314>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02b      	beq.n	8003cea <HAL_GPIO_Init+0x226>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a51      	ldr	r2, [pc, #324]	@ (8003ddc <HAL_GPIO_Init+0x318>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d025      	beq.n	8003ce6 <HAL_GPIO_Init+0x222>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a50      	ldr	r2, [pc, #320]	@ (8003de0 <HAL_GPIO_Init+0x31c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01f      	beq.n	8003ce2 <HAL_GPIO_Init+0x21e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8003de4 <HAL_GPIO_Init+0x320>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d019      	beq.n	8003cde <HAL_GPIO_Init+0x21a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4e      	ldr	r2, [pc, #312]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_GPIO_Init+0x216>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8003dec <HAL_GPIO_Init+0x328>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_GPIO_Init+0x212>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8003df0 <HAL_GPIO_Init+0x32c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x20e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003df4 <HAL_GPIO_Init+0x330>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_GPIO_Init+0x20a>
 8003cca:	2307      	movs	r3, #7
 8003ccc:	e00e      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	e00c      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cd2:	2306      	movs	r3, #6
 8003cd4:	e00a      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cd6:	2305      	movs	r3, #5
 8003cd8:	e008      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e004      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cea:	2300      	movs	r3, #0
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f002 0203 	and.w	r2, r2, #3
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cfc:	4935      	ldr	r1, [pc, #212]	@ (8003dd4 <HAL_GPIO_Init+0x310>)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3302      	adds	r3, #2
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2e:	4a32      	ldr	r2, [pc, #200]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d34:	4b30      	ldr	r3, [pc, #192]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d58:	4a27      	ldr	r2, [pc, #156]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d5e:	4b26      	ldr	r3, [pc, #152]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d82:	4a1d      	ldr	r2, [pc, #116]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dac:	4a12      	ldr	r2, [pc, #72]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3301      	adds	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	f67f ae90 	bls.w	8003ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	3724      	adds	r7, #36	@ 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	40020000 	.word	0x40020000
 8003ddc:	40020400 	.word	0x40020400
 8003de0:	40020800 	.word	0x40020800
 8003de4:	40020c00 	.word	0x40020c00
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40021400 	.word	0x40021400
 8003df0:	40021800 	.word	0x40021800
 8003df4:	40021c00 	.word	0x40021c00
 8003df8:	40013c00 	.word	0x40013c00

08003dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e18:	e003      	b.n	8003e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	041a      	lsls	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	619a      	str	r2, [r3, #24]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e12b      	b.n	800409a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd fa8c 	bl	8001374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	@ 0x24
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e94:	f001 fd2a 	bl	80058ec <HAL_RCC_GetPCLK1Freq>
 8003e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4a81      	ldr	r2, [pc, #516]	@ (80040a4 <HAL_I2C_Init+0x274>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d807      	bhi.n	8003eb4 <HAL_I2C_Init+0x84>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a80      	ldr	r2, [pc, #512]	@ (80040a8 <HAL_I2C_Init+0x278>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bf94      	ite	ls
 8003eac:	2301      	movls	r3, #1
 8003eae:	2300      	movhi	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	e006      	b.n	8003ec2 <HAL_I2C_Init+0x92>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80040ac <HAL_I2C_Init+0x27c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	bf94      	ite	ls
 8003ebc:	2301      	movls	r3, #1
 8003ebe:	2300      	movhi	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e0e7      	b.n	800409a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a78      	ldr	r2, [pc, #480]	@ (80040b0 <HAL_I2C_Init+0x280>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	0c9b      	lsrs	r3, r3, #18
 8003ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80040a4 <HAL_I2C_Init+0x274>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d802      	bhi.n	8003f04 <HAL_I2C_Init+0xd4>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3301      	adds	r3, #1
 8003f02:	e009      	b.n	8003f18 <HAL_I2C_Init+0xe8>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	4a69      	ldr	r2, [pc, #420]	@ (80040b4 <HAL_I2C_Init+0x284>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	3301      	adds	r3, #1
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	495c      	ldr	r1, [pc, #368]	@ (80040a4 <HAL_I2C_Init+0x274>)
 8003f34:	428b      	cmp	r3, r1
 8003f36:	d819      	bhi.n	8003f6c <HAL_I2C_Init+0x13c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e59      	subs	r1, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f46:	1c59      	adds	r1, r3, #1
 8003f48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_I2C_Init+0x138>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1e59      	subs	r1, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f60:	3301      	adds	r3, #1
 8003f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f66:	e051      	b.n	800400c <HAL_I2C_Init+0x1dc>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	e04f      	b.n	800400c <HAL_I2C_Init+0x1dc>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d111      	bne.n	8003f98 <HAL_I2C_Init+0x168>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1e58      	subs	r0, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	440b      	add	r3, r1
 8003f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f86:	3301      	adds	r3, #1
 8003f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e012      	b.n	8003fbe <HAL_I2C_Init+0x18e>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1e58      	subs	r0, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	0099      	lsls	r1, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_Init+0x196>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e022      	b.n	800400c <HAL_I2C_Init+0x1dc>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10e      	bne.n	8003fec <HAL_I2C_Init+0x1bc>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1e58      	subs	r0, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	440b      	add	r3, r1
 8003fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fea:	e00f      	b.n	800400c <HAL_I2C_Init+0x1dc>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1e58      	subs	r0, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	0099      	lsls	r1, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004002:	3301      	adds	r3, #1
 8004004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004008:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	6809      	ldr	r1, [r1, #0]
 8004010:	4313      	orrs	r3, r2
 8004012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800403a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6911      	ldr	r1, [r2, #16]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68d2      	ldr	r2, [r2, #12]
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	430b      	orrs	r3, r1
 800404e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	000186a0 	.word	0x000186a0
 80040a8:	001e847f 	.word	0x001e847f
 80040ac:	003d08ff 	.word	0x003d08ff
 80040b0:	431bde83 	.word	0x431bde83
 80040b4:	10624dd3 	.word	0x10624dd3

080040b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	817b      	strh	r3, [r7, #10]
 80040ca:	460b      	mov	r3, r1
 80040cc:	813b      	strh	r3, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d2:	f7ff fbb5 	bl	8003840 <HAL_GetTick>
 80040d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	f040 80d9 	bne.w	8004298 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2319      	movs	r3, #25
 80040ec:	2201      	movs	r2, #1
 80040ee:	496d      	ldr	r1, [pc, #436]	@ (80042a4 <HAL_I2C_Mem_Write+0x1ec>)
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fdad 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0cc      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_I2C_Mem_Write+0x56>
 800410a:	2302      	movs	r3, #2
 800410c:	e0c5      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d007      	beq.n	8004134 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2221      	movs	r2, #33	@ 0x21
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2240      	movs	r2, #64	@ 0x40
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004164:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a4d      	ldr	r2, [pc, #308]	@ (80042a8 <HAL_I2C_Mem_Write+0x1f0>)
 8004174:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004176:	88f8      	ldrh	r0, [r7, #6]
 8004178:	893a      	ldrh	r2, [r7, #8]
 800417a:	8979      	ldrh	r1, [r7, #10]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	4603      	mov	r3, r0
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fbe4 	bl	8004954 <I2C_RequestMemoryWrite>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d052      	beq.n	8004238 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e081      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fe2e 	bl	8004dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d107      	bne.n	80041be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06b      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d11b      	bne.n	8004238 <HAL_I2C_Mem_Write+0x180>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d017      	beq.n	8004238 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1aa      	bne.n	8004196 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fe1a 	bl	8004e7e <I2C_WaitOnBTFFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	2b04      	cmp	r3, #4
 8004256:	d107      	bne.n	8004268 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e016      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	00100002 	.word	0x00100002
 80042a8:	ffff0000 	.word	0xffff0000

080042ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08c      	sub	sp, #48	@ 0x30
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	817b      	strh	r3, [r7, #10]
 80042be:	460b      	mov	r3, r1
 80042c0:	813b      	strh	r3, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042c6:	f7ff fabb 	bl	8003840 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	f040 8208 	bne.w	80046ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2319      	movs	r3, #25
 80042e0:	2201      	movs	r2, #1
 80042e2:	497b      	ldr	r1, [pc, #492]	@ (80044d0 <HAL_I2C_Mem_Read+0x224>)
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fcb3 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
 80042f2:	e1fb      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_I2C_Mem_Read+0x56>
 80042fe:	2302      	movs	r3, #2
 8004300:	e1f4      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d007      	beq.n	8004328 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2222      	movs	r2, #34	@ 0x22
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2240      	movs	r2, #64	@ 0x40
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a5b      	ldr	r2, [pc, #364]	@ (80044d4 <HAL_I2C_Mem_Read+0x228>)
 8004368:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436a:	88f8      	ldrh	r0, [r7, #6]
 800436c:	893a      	ldrh	r2, [r7, #8]
 800436e:	8979      	ldrh	r1, [r7, #10]
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4603      	mov	r3, r0
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fb80 	bl	8004a80 <I2C_RequestMemoryRead>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1b0      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438e:	2b00      	cmp	r3, #0
 8004390:	d113      	bne.n	80043ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	623b      	str	r3, [r7, #32]
 80043a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e184      	b.n	80046c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d11b      	bne.n	80043fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e164      	b.n	80046c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d11b      	bne.n	800443a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004410:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	e144      	b.n	80046c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004450:	e138      	b.n	80046c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	2b03      	cmp	r3, #3
 8004458:	f200 80f1 	bhi.w	800463e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004460:	2b01      	cmp	r3, #1
 8004462:	d123      	bne.n	80044ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004466:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fd49 	bl	8004f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e139      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044aa:	e10b      	b.n	80046c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d14e      	bne.n	8004552 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ba:	2200      	movs	r2, #0
 80044bc:	4906      	ldr	r1, [pc, #24]	@ (80044d8 <HAL_I2C_Mem_Read+0x22c>)
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fbc6 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e10e      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
 80044ce:	bf00      	nop
 80044d0:	00100002 	.word	0x00100002
 80044d4:	ffff0000 	.word	0xffff0000
 80044d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004550:	e0b8      	b.n	80046c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004558:	2200      	movs	r2, #0
 800455a:	4966      	ldr	r1, [pc, #408]	@ (80046f4 <HAL_I2C_Mem_Read+0x448>)
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fb77 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0bf      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800457a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	2200      	movs	r2, #0
 80045b6:	494f      	ldr	r1, [pc, #316]	@ (80046f4 <HAL_I2C_Mem_Read+0x448>)
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fb49 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e091      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800463c:	e042      	b.n	80046c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fc5c 	bl	8004f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e04c      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d118      	bne.n	80046c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f aec2 	bne.w	8004452 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e000      	b.n	80046ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
  }
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	@ 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	00010004 	.word	0x00010004

080046f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	@ 0x28
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	460b      	mov	r3, r1
 8004706:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004708:	f7ff f89a 	bl	8003840 <HAL_GetTick>
 800470c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800470e:	2301      	movs	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	f040 8111 	bne.w	8004942 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2319      	movs	r3, #25
 8004726:	2201      	movs	r2, #1
 8004728:	4988      	ldr	r1, [pc, #544]	@ (800494c <HAL_I2C_IsDeviceReady+0x254>)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fa90 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004736:	2302      	movs	r3, #2
 8004738:	e104      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_I2C_IsDeviceReady+0x50>
 8004744:	2302      	movs	r3, #2
 8004746:	e0fd      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d007      	beq.n	800476e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800477c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2224      	movs	r2, #36	@ 0x24
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a70      	ldr	r2, [pc, #448]	@ (8004950 <HAL_I2C_IsDeviceReady+0x258>)
 8004790:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa4e 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c8:	d103      	bne.n	80047d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e0b6      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047d6:	897b      	ldrh	r3, [r7, #10]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80047e6:	f7ff f82b 	bl	8003840 <HAL_GetTick>
 80047ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800481a:	e025      	b.n	8004868 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800481c:	f7ff f810 	bl	8003840 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d302      	bcc.n	8004832 <HAL_I2C_IsDeviceReady+0x13a>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	22a0      	movs	r2, #160	@ 0xa0
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b02      	cmp	r3, #2
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2ba0      	cmp	r3, #160	@ 0xa0
 8004872:	d005      	beq.n	8004880 <HAL_I2C_IsDeviceReady+0x188>
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <HAL_I2C_IsDeviceReady+0x188>
 800487a:	7dbb      	ldrb	r3, [r7, #22]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0cd      	beq.n	800481c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d129      	bne.n	80048ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2319      	movs	r3, #25
 80048c2:	2201      	movs	r2, #1
 80048c4:	4921      	ldr	r1, [pc, #132]	@ (800494c <HAL_I2C_IsDeviceReady+0x254>)
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f9c2 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e036      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e02c      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004902:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2319      	movs	r3, #25
 800490a:	2201      	movs	r2, #1
 800490c:	490f      	ldr	r1, [pc, #60]	@ (800494c <HAL_I2C_IsDeviceReady+0x254>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f99e 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e012      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	3301      	adds	r3, #1
 8004922:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	f4ff af32 	bcc.w	8004792 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
  }
}
 8004944:	4618      	mov	r0, r3
 8004946:	3720      	adds	r7, #32
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	00100002 	.word	0x00100002
 8004950:	ffff0000 	.word	0xffff0000

08004954 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	4608      	mov	r0, r1
 800495e:	4611      	mov	r1, r2
 8004960:	461a      	mov	r2, r3
 8004962:	4603      	mov	r3, r0
 8004964:	817b      	strh	r3, [r7, #10]
 8004966:	460b      	mov	r3, r1
 8004968:	813b      	strh	r3, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800497c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	2200      	movs	r2, #0
 8004986:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f960 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a4:	d103      	bne.n	80049ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e05f      	b.n	8004a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	6a3a      	ldr	r2, [r7, #32]
 80049c6:	492d      	ldr	r1, [pc, #180]	@ (8004a7c <I2C_RequestMemoryWrite+0x128>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f998 	bl	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e04c      	b.n	8004a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	6a39      	ldr	r1, [r7, #32]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fa02 	bl	8004dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d107      	bne.n	8004a16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e02b      	b.n	8004a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d105      	bne.n	8004a2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a20:	893b      	ldrh	r3, [r7, #8]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]
 8004a2a:	e021      	b.n	8004a70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a2c:	893b      	ldrh	r3, [r7, #8]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3c:	6a39      	ldr	r1, [r7, #32]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f9dc 	bl	8004dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d107      	bne.n	8004a62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e005      	b.n	8004a72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a66:	893b      	ldrh	r3, [r7, #8]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	00010002 	.word	0x00010002

08004a80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	4608      	mov	r0, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	817b      	strh	r3, [r7, #10]
 8004a92:	460b      	mov	r3, r1
 8004a94:	813b      	strh	r3, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f8c2 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae0:	d103      	bne.n	8004aea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e0aa      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aee:	897b      	ldrh	r3, [r7, #10]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	6a3a      	ldr	r2, [r7, #32]
 8004b02:	4952      	ldr	r1, [pc, #328]	@ (8004c4c <I2C_RequestMemoryRead+0x1cc>)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f8fa 	bl	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e097      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2c:	6a39      	ldr	r1, [r7, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f964 	bl	8004dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d107      	bne.n	8004b52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e076      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	e021      	b.n	8004bac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b68:	893b      	ldrh	r3, [r7, #8]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b78:	6a39      	ldr	r1, [r7, #32]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f93e 	bl	8004dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00d      	beq.n	8004ba2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d107      	bne.n	8004b9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e050      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba2:	893b      	ldrh	r3, [r7, #8]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bae:	6a39      	ldr	r1, [r7, #32]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f923 	bl	8004dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d107      	bne.n	8004bd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e035      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004be6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f82b 	bl	8004c50 <I2C_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00d      	beq.n	8004c1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c0e:	d103      	bne.n	8004c18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e013      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c1c:	897b      	ldrh	r3, [r7, #10]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	6a3a      	ldr	r2, [r7, #32]
 8004c30:	4906      	ldr	r1, [pc, #24]	@ (8004c4c <I2C_RequestMemoryRead+0x1cc>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f863 	bl	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	00010002 	.word	0x00010002

08004c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c60:	e025      	b.n	8004cae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d021      	beq.n	8004cae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fe fde9 	bl	8003840 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d116      	bne.n	8004cae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e023      	b.n	8004cf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d10d      	bne.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	e00c      	b.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d0b6      	beq.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d0c:	e051      	b.n	8004db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1c:	d123      	bne.n	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f043 0204 	orr.w	r2, r3, #4
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e046      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d021      	beq.n	8004db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fe fd67 	bl	8003840 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d116      	bne.n	8004db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e020      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d10c      	bne.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	43da      	mvns	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	e00b      	b.n	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	43da      	mvns	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4013      	ands	r3, r2
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d18d      	bne.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e08:	e02d      	b.n	8004e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f8ce 	bl	8004fac <I2C_IsAcknowledgeFailed>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e02d      	b.n	8004e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d021      	beq.n	8004e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e22:	f7fe fd0d 	bl	8003840 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d116      	bne.n	8004e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e007      	b.n	8004e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e70:	2b80      	cmp	r3, #128	@ 0x80
 8004e72:	d1ca      	bne.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e8a:	e02d      	b.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f88d 	bl	8004fac <I2C_IsAcknowledgeFailed>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e02d      	b.n	8004ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d021      	beq.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	f7fe fccc 	bl	8003840 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e007      	b.n	8004ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d1ca      	bne.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f0c:	e042      	b.n	8004f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d119      	bne.n	8004f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0210 	mvn.w	r2, #16
 8004f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e029      	b.n	8004fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f50:	f7fe fc76 	bl	8003840 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d116      	bne.n	8004f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e007      	b.n	8004fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9e:	2b40      	cmp	r3, #64	@ 0x40
 8004fa0:	d1b5      	bne.n	8004f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc2:	d11b      	bne.n	8004ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	f043 0204 	orr.w	r2, r3, #4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e267      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d075      	beq.n	8005116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800502a:	4b88      	ldr	r3, [pc, #544]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b04      	cmp	r3, #4
 8005034:	d00c      	beq.n	8005050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b85      	ldr	r3, [pc, #532]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800503e:	2b08      	cmp	r3, #8
 8005040:	d112      	bne.n	8005068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b82      	ldr	r3, [pc, #520]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800504a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800504e:	d10b      	bne.n	8005068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	4b7e      	ldr	r3, [pc, #504]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05b      	beq.n	8005114 <HAL_RCC_OscConfig+0x108>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d157      	bne.n	8005114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e242      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d106      	bne.n	8005080 <HAL_RCC_OscConfig+0x74>
 8005072:	4b76      	ldr	r3, [pc, #472]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a75      	ldr	r2, [pc, #468]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e01d      	b.n	80050bc <HAL_RCC_OscConfig+0xb0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x98>
 800508a:	4b70      	ldr	r3, [pc, #448]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a6f      	ldr	r2, [pc, #444]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b6d      	ldr	r3, [pc, #436]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6c      	ldr	r2, [pc, #432]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0xb0>
 80050a4:	4b69      	ldr	r3, [pc, #420]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a68      	ldr	r2, [pc, #416]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4b66      	ldr	r3, [pc, #408]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a65      	ldr	r2, [pc, #404]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fe fbbc 	bl	8003840 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050cc:	f7fe fbb8 	bl	8003840 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	@ 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e207      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b5b      	ldr	r3, [pc, #364]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0xc0>
 80050ea:	e014      	b.n	8005116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ec:	f7fe fba8 	bl	8003840 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f4:	f7fe fba4 	bl	8003840 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	@ 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e1f3      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	4b51      	ldr	r3, [pc, #324]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0xe8>
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d063      	beq.n	80051ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005122:	4b4a      	ldr	r3, [pc, #296]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b47      	ldr	r3, [pc, #284]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005136:	2b08      	cmp	r3, #8
 8005138:	d11c      	bne.n	8005174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b44      	ldr	r3, [pc, #272]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d116      	bne.n	8005174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	4b41      	ldr	r3, [pc, #260]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_RCC_OscConfig+0x152>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e1c7      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515e:	4b3b      	ldr	r3, [pc, #236]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4937      	ldr	r1, [pc, #220]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	e03a      	b.n	80051ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800517c:	4b34      	ldr	r3, [pc, #208]	@ (8005250 <HAL_RCC_OscConfig+0x244>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005182:	f7fe fb5d 	bl	8003840 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518a:	f7fe fb59 	bl	8003840 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e1a8      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519c:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a8:	4b28      	ldr	r3, [pc, #160]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4925      	ldr	r1, [pc, #148]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]
 80051bc:	e015      	b.n	80051ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051be:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <HAL_RCC_OscConfig+0x244>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fe fb3c 	bl	8003840 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051cc:	f7fe fb38 	bl	8003840 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e187      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051de:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d036      	beq.n	8005264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051fe:	4b15      	ldr	r3, [pc, #84]	@ (8005254 <HAL_RCC_OscConfig+0x248>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fe fb1c 	bl	8003840 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800520c:	f7fe fb18 	bl	8003840 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e167      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521e:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x200>
 800522a:	e01b      	b.n	8005264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCC_OscConfig+0x248>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005232:	f7fe fb05 	bl	8003840 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005238:	e00e      	b.n	8005258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523a:	f7fe fb01 	bl	8003840 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d907      	bls.n	8005258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e150      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
 800524c:	40023800 	.word	0x40023800
 8005250:	42470000 	.word	0x42470000
 8005254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005258:	4b88      	ldr	r3, [pc, #544]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800525a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ea      	bne.n	800523a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8097 	beq.w	80053a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005276:	4b81      	ldr	r3, [pc, #516]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	4b7d      	ldr	r3, [pc, #500]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	4a7c      	ldr	r2, [pc, #496]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005290:	6413      	str	r3, [r2, #64]	@ 0x40
 8005292:	4b7a      	ldr	r3, [pc, #488]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a2:	4b77      	ldr	r3, [pc, #476]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d118      	bne.n	80052e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ae:	4b74      	ldr	r3, [pc, #464]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a73      	ldr	r2, [pc, #460]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ba:	f7fe fac1 	bl	8003840 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c2:	f7fe fabd 	bl	8003840 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e10c      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d106      	bne.n	80052f6 <HAL_RCC_OscConfig+0x2ea>
 80052e8:	4b64      	ldr	r3, [pc, #400]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ec:	4a63      	ldr	r2, [pc, #396]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f4:	e01c      	b.n	8005330 <HAL_RCC_OscConfig+0x324>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d10c      	bne.n	8005318 <HAL_RCC_OscConfig+0x30c>
 80052fe:	4b5f      	ldr	r3, [pc, #380]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	4a5e      	ldr	r2, [pc, #376]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	6713      	str	r3, [r2, #112]	@ 0x70
 800530a:	4b5c      	ldr	r3, [pc, #368]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	4a5b      	ldr	r2, [pc, #364]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6713      	str	r3, [r2, #112]	@ 0x70
 8005316:	e00b      	b.n	8005330 <HAL_RCC_OscConfig+0x324>
 8005318:	4b58      	ldr	r3, [pc, #352]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531c:	4a57      	ldr	r2, [pc, #348]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	@ 0x70
 8005324:	4b55      	ldr	r3, [pc, #340]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4a54      	ldr	r2, [pc, #336]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d015      	beq.n	8005364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fe fa82 	bl	8003840 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fe fa7e 	bl	8003840 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0cb      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005356:	4b49      	ldr	r3, [pc, #292]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ee      	beq.n	8005340 <HAL_RCC_OscConfig+0x334>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005364:	f7fe fa6c 	bl	8003840 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536a:	e00a      	b.n	8005382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fe fa68 	bl	8003840 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0b5      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005382:	4b3e      	ldr	r3, [pc, #248]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ee      	bne.n	800536c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005394:	4b39      	ldr	r3, [pc, #228]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	4a38      	ldr	r2, [pc, #224]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800539a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800539e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80a1 	beq.w	80054ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053aa:	4b34      	ldr	r3, [pc, #208]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d05c      	beq.n	8005470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d141      	bne.n	8005442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053be:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fe fa3c 	bl	8003840 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fe fa38 	bl	8003840 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e087      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	4b27      	ldr	r3, [pc, #156]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	019b      	lsls	r3, r3, #6
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	3b01      	subs	r3, #1
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	491b      	ldr	r1, [pc, #108]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005414:	4b1b      	ldr	r3, [pc, #108]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541a:	f7fe fa11 	bl	8003840 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005422:	f7fe fa0d 	bl	8003840 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e05c      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x416>
 8005440:	e054      	b.n	80054ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005442:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fe f9fa 	bl	8003840 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005450:	f7fe f9f6 	bl	8003840 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e045      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x444>
 800546e:	e03d      	b.n	80054ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d107      	bne.n	8005488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e038      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
 800547c:	40023800 	.word	0x40023800
 8005480:	40007000 	.word	0x40007000
 8005484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <HAL_RCC_OscConfig+0x4ec>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d028      	beq.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d121      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d11a      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d111      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	3b01      	subs	r3, #1
 80054d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800

080054fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0cc      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005510:	4b68      	ldr	r3, [pc, #416]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d90c      	bls.n	8005538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551e:	4b65      	ldr	r3, [pc, #404]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005526:	4b63      	ldr	r3, [pc, #396]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d001      	beq.n	8005538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0b8      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d020      	beq.n	8005586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005550:	4b59      	ldr	r3, [pc, #356]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4a58      	ldr	r2, [pc, #352]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800555a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005568:	4b53      	ldr	r3, [pc, #332]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	4a52      	ldr	r2, [pc, #328]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005574:	4b50      	ldr	r3, [pc, #320]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	494d      	ldr	r1, [pc, #308]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d044      	beq.n	800561c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	4b47      	ldr	r3, [pc, #284]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d119      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e07f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d003      	beq.n	80055ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ba:	4b3f      	ldr	r3, [pc, #252]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e06f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ca:	4b3b      	ldr	r3, [pc, #236]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e067      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055da:	4b37      	ldr	r3, [pc, #220]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f023 0203 	bic.w	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4934      	ldr	r1, [pc, #208]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055ec:	f7fe f928 	bl	8003840 <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f2:	e00a      	b.n	800560a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f4:	f7fe f924 	bl	8003840 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e04f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560a:	4b2b      	ldr	r3, [pc, #172]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 020c 	and.w	r2, r3, #12
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	429a      	cmp	r2, r3
 800561a:	d1eb      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800561c:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d20c      	bcs.n	8005644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562a:	4b22      	ldr	r3, [pc, #136]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005632:	4b20      	ldr	r3, [pc, #128]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d001      	beq.n	8005644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e032      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005650:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4916      	ldr	r1, [pc, #88]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800566e:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	490e      	ldr	r1, [pc, #56]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005682:	f000 f821 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005686:	4602      	mov	r2, r0
 8005688:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	490a      	ldr	r1, [pc, #40]	@ (80056bc <HAL_RCC_ClockConfig+0x1c0>)
 8005694:	5ccb      	ldrb	r3, [r1, r3]
 8005696:	fa22 f303 	lsr.w	r3, r2, r3
 800569a:	4a09      	ldr	r2, [pc, #36]	@ (80056c0 <HAL_RCC_ClockConfig+0x1c4>)
 800569c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <HAL_RCC_ClockConfig+0x1c8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe f888 	bl	80037b8 <HAL_InitTick>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40023c00 	.word	0x40023c00
 80056b8:	40023800 	.word	0x40023800
 80056bc:	08009d64 	.word	0x08009d64
 80056c0:	20000010 	.word	0x20000010
 80056c4:	20000014 	.word	0x20000014

080056c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056cc:	b094      	sub	sp, #80	@ 0x50
 80056ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d4:	2300      	movs	r3, #0
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	2300      	movs	r3, #0
 80056da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e0:	4b79      	ldr	r3, [pc, #484]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 030c 	and.w	r3, r3, #12
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d00d      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x40>
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	f200 80e1 	bhi.w	80058b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x34>
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d003      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x3a>
 80056fa:	e0db      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056fc:	4b73      	ldr	r3, [pc, #460]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x204>)
 80056fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005700:	e0db      	b.n	80058ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005702:	4b73      	ldr	r3, [pc, #460]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005704:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005706:	e0d8      	b.n	80058ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005708:	4b6f      	ldr	r3, [pc, #444]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005710:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005712:	4b6d      	ldr	r3, [pc, #436]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d063      	beq.n	80057e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571e:	4b6a      	ldr	r3, [pc, #424]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	2200      	movs	r2, #0
 8005726:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005728:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005730:	633b      	str	r3, [r7, #48]	@ 0x30
 8005732:	2300      	movs	r3, #0
 8005734:	637b      	str	r3, [r7, #52]	@ 0x34
 8005736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800573a:	4622      	mov	r2, r4
 800573c:	462b      	mov	r3, r5
 800573e:	f04f 0000 	mov.w	r0, #0
 8005742:	f04f 0100 	mov.w	r1, #0
 8005746:	0159      	lsls	r1, r3, #5
 8005748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800574c:	0150      	lsls	r0, r2, #5
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4621      	mov	r1, r4
 8005754:	1a51      	subs	r1, r2, r1
 8005756:	6139      	str	r1, [r7, #16]
 8005758:	4629      	mov	r1, r5
 800575a:	eb63 0301 	sbc.w	r3, r3, r1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800576c:	4659      	mov	r1, fp
 800576e:	018b      	lsls	r3, r1, #6
 8005770:	4651      	mov	r1, sl
 8005772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005776:	4651      	mov	r1, sl
 8005778:	018a      	lsls	r2, r1, #6
 800577a:	4651      	mov	r1, sl
 800577c:	ebb2 0801 	subs.w	r8, r2, r1
 8005780:	4659      	mov	r1, fp
 8005782:	eb63 0901 	sbc.w	r9, r3, r1
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800579a:	4690      	mov	r8, r2
 800579c:	4699      	mov	r9, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	eb18 0303 	adds.w	r3, r8, r3
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	462b      	mov	r3, r5
 80057a8:	eb49 0303 	adc.w	r3, r9, r3
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057ba:	4629      	mov	r1, r5
 80057bc:	024b      	lsls	r3, r1, #9
 80057be:	4621      	mov	r1, r4
 80057c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057c4:	4621      	mov	r1, r4
 80057c6:	024a      	lsls	r2, r1, #9
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ce:	2200      	movs	r2, #0
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057d8:	f7fb f8e4 	bl	80009a4 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4613      	mov	r3, r2
 80057e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e4:	e058      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057e6:	4b38      	ldr	r3, [pc, #224]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	099b      	lsrs	r3, r3, #6
 80057ec:	2200      	movs	r2, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	4611      	mov	r1, r2
 80057f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	2300      	movs	r3, #0
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005800:	4642      	mov	r2, r8
 8005802:	464b      	mov	r3, r9
 8005804:	f04f 0000 	mov.w	r0, #0
 8005808:	f04f 0100 	mov.w	r1, #0
 800580c:	0159      	lsls	r1, r3, #5
 800580e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005812:	0150      	lsls	r0, r2, #5
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4641      	mov	r1, r8
 800581a:	ebb2 0a01 	subs.w	sl, r2, r1
 800581e:	4649      	mov	r1, r9
 8005820:	eb63 0b01 	sbc.w	fp, r3, r1
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005838:	ebb2 040a 	subs.w	r4, r2, sl
 800583c:	eb63 050b 	sbc.w	r5, r3, fp
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	00eb      	lsls	r3, r5, #3
 800584a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800584e:	00e2      	lsls	r2, r4, #3
 8005850:	4614      	mov	r4, r2
 8005852:	461d      	mov	r5, r3
 8005854:	4643      	mov	r3, r8
 8005856:	18e3      	adds	r3, r4, r3
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	464b      	mov	r3, r9
 800585c:	eb45 0303 	adc.w	r3, r5, r3
 8005860:	607b      	str	r3, [r7, #4]
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800586e:	4629      	mov	r1, r5
 8005870:	028b      	lsls	r3, r1, #10
 8005872:	4621      	mov	r1, r4
 8005874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005878:	4621      	mov	r1, r4
 800587a:	028a      	lsls	r2, r1, #10
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005882:	2200      	movs	r2, #0
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	61fa      	str	r2, [r7, #28]
 8005888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800588c:	f7fb f88a 	bl	80009a4 <__aeabi_uldivmod>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4613      	mov	r3, r2
 8005896:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005898:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	0c1b      	lsrs	r3, r3, #16
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	3301      	adds	r3, #1
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80058a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058b2:	e002      	b.n	80058ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058b4:	4b05      	ldr	r3, [pc, #20]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x204>)
 80058b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3750      	adds	r7, #80	@ 0x50
 80058c0:	46bd      	mov	sp, r7
 80058c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800
 80058cc:	00f42400 	.word	0x00f42400
 80058d0:	007a1200 	.word	0x007a1200

080058d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058d8:	4b03      	ldr	r3, [pc, #12]	@ (80058e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20000010 	.word	0x20000010

080058ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058f0:	f7ff fff0 	bl	80058d4 <HAL_RCC_GetHCLKFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b05      	ldr	r3, [pc, #20]	@ (800590c <HAL_RCC_GetPCLK1Freq+0x20>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	0a9b      	lsrs	r3, r3, #10
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	4903      	ldr	r1, [pc, #12]	@ (8005910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40023800 	.word	0x40023800
 8005910:	08009d74 	.word	0x08009d74

08005914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e07b      	b.n	8005a1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005936:	d009      	beq.n	800594c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	61da      	str	r2, [r3, #28]
 800593e:	e005      	b.n	800594c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fd fd34 	bl	80033d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005982:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d0:	ea42 0103 	orr.w	r1, r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	f003 0104 	and.w	r1, r3, #4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f2:	f003 0210 	and.w	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b088      	sub	sp, #32
 8005a2a:	af02      	add	r7, sp, #8
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a42:	d112      	bne.n	8005a6a <HAL_SPI_Receive+0x44>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10e      	bne.n	8005a6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f8f1 	bl	8005c48 <HAL_SPI_TransmitReceive>
 8005a66:	4603      	mov	r3, r0
 8005a68:	e0ea      	b.n	8005c40 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_SPI_Receive+0x52>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0e3      	b.n	8005c40 <HAL_SPI_Receive+0x21a>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a80:	f7fd fede 	bl	8003840 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d002      	beq.n	8005a98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
 8005a94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a96:	e0ca      	b.n	8005c2e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_SPI_Receive+0x7e>
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005aa8:	e0c1      	b.n	8005c2e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2204      	movs	r2, #4
 8005aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af0:	d10f      	bne.n	8005b12 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1c:	2b40      	cmp	r3, #64	@ 0x40
 8005b1e:	d007      	beq.n	8005b30 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d162      	bne.n	8005bfe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b38:	e02e      	b.n	8005b98 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d115      	bne.n	8005b74 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f103 020c 	add.w	r2, r3, #12
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b72:	e011      	b.n	8005b98 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b74:	f7fd fe64 	bl	8003840 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d803      	bhi.n	8005b8c <HAL_SPI_Receive+0x166>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d102      	bne.n	8005b92 <HAL_SPI_Receive+0x16c>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b96:	e04a      	b.n	8005c2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1cb      	bne.n	8005b3a <HAL_SPI_Receive+0x114>
 8005ba2:	e031      	b.n	8005c08 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d113      	bne.n	8005bda <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bd8:	e011      	b.n	8005bfe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bda:	f7fd fe31 	bl	8003840 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d803      	bhi.n	8005bf2 <HAL_SPI_Receive+0x1cc>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d102      	bne.n	8005bf8 <HAL_SPI_Receive+0x1d2>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d102      	bne.n	8005bfe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bfc:	e017      	b.n	8005c2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1cd      	bne.n	8005ba4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fa45 	bl	800609c <SPI_EndRxTransaction>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
 8005c2a:	e000      	b.n	8005c2e <HAL_SPI_Receive+0x208>
  }

error :
 8005c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08c      	sub	sp, #48	@ 0x30
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c56:	2301      	movs	r3, #1
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_SPI_TransmitReceive+0x26>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e18a      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x33c>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c76:	f7fd fde3 	bl	8003840 <HAL_GetTick>
 8005c7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c8c:	887b      	ldrh	r3, [r7, #2]
 8005c8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d00f      	beq.n	8005cb8 <HAL_SPI_TransmitReceive+0x70>
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c9e:	d107      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d103      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x68>
 8005ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d003      	beq.n	8005cb8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005cb6:	e15b      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_SPI_TransmitReceive+0x82>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_TransmitReceive+0x82>
 8005cc4:	887b      	ldrh	r3, [r7, #2]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005cd0:	e14e      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d003      	beq.n	8005ce6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2205      	movs	r2, #5
 8005ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	887a      	ldrh	r2, [r7, #2]
 8005cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	887a      	ldrh	r2, [r7, #2]
 8005cfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	887a      	ldrh	r2, [r7, #2]
 8005d08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	887a      	ldrh	r2, [r7, #2]
 8005d0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d26:	2b40      	cmp	r3, #64	@ 0x40
 8005d28:	d007      	beq.n	8005d3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d42:	d178      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0x10a>
 8005d4c:	8b7b      	ldrh	r3, [r7, #26]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d166      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d56:	881a      	ldrh	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d76:	e053      	b.n	8005e20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d11b      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x176>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d016      	beq.n	8005dbe <HAL_SPI_TransmitReceive+0x176>
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d113      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9a:	881a      	ldrh	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d119      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x1b8>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d014      	beq.n	8005e00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	b292      	uxth	r2, r2
 8005de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de8:	1c9a      	adds	r2, r3, #2
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e00:	f7fd fd1e 	bl	8003840 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d807      	bhi.n	8005e20 <HAL_SPI_TransmitReceive+0x1d8>
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d003      	beq.n	8005e20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005e1e:	e0a7      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1a6      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x130>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1a1      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x130>
 8005e34:	e07c      	b.n	8005f30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_SPI_TransmitReceive+0x1fc>
 8005e3e:	8b7b      	ldrh	r3, [r7, #26]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d16b      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e6a:	e057      	b.n	8005f1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d11c      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x26c>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d017      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x26c>
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d114      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	7812      	ldrb	r2, [r2, #0]
 8005e96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d119      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x2ae>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d014      	beq.n	8005ef6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ef6:	f7fd fca3 	bl	8003840 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d803      	bhi.n	8005f0e <HAL_SPI_TransmitReceive+0x2c6>
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d102      	bne.n	8005f14 <HAL_SPI_TransmitReceive+0x2cc>
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005f1a:	e029      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1a2      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x224>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d19d      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f917 	bl	8006168 <SPI_EndRxTxTransaction>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005f4c:	e010      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	e000      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005f80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3730      	adds	r7, #48	@ 0x30
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f9c:	f7fd fc50 	bl	8003840 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fac:	f7fd fc48 	bl	8003840 <HAL_GetTick>
 8005fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fb2:	4b39      	ldr	r3, [pc, #228]	@ (8006098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	015b      	lsls	r3, r3, #5
 8005fb8:	0d1b      	lsrs	r3, r3, #20
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc2:	e054      	b.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d050      	beq.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fcc:	f7fd fc38 	bl	8003840 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d902      	bls.n	8005fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d13d      	bne.n	800605e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ffa:	d111      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006004:	d004      	beq.n	8006010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600e:	d107      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800601e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006028:	d10f      	bne.n	800604a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e017      	b.n	800608e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3b01      	subs	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	429a      	cmp	r2, r3
 800608a:	d19b      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000010 	.word	0x20000010

0800609c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060b0:	d111      	bne.n	80060d6 <SPI_EndRxTransaction+0x3a>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ba:	d004      	beq.n	80060c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c4:	d107      	bne.n	80060d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060de:	d12a      	bne.n	8006136 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e8:	d012      	beq.n	8006110 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2180      	movs	r1, #128	@ 0x80
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff ff49 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02d      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e026      	b.n	800615e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2200      	movs	r2, #0
 8006118:	2101      	movs	r1, #1
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ff36 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01a      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e013      	b.n	800615e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	2101      	movs	r1, #1
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ff23 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e000      	b.n	800615e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006174:	4b1b      	ldr	r3, [pc, #108]	@ (80061e4 <SPI_EndRxTxTransaction+0x7c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1b      	ldr	r2, [pc, #108]	@ (80061e8 <SPI_EndRxTxTransaction+0x80>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	0d5b      	lsrs	r3, r3, #21
 8006180:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006184:	fb02 f303 	mul.w	r3, r2, r3
 8006188:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006192:	d112      	bne.n	80061ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	2180      	movs	r1, #128	@ 0x80
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff fef4 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ae:	f043 0220 	orr.w	r2, r3, #32
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e00f      	b.n	80061da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d0:	2b80      	cmp	r3, #128	@ 0x80
 80061d2:	d0f2      	beq.n	80061ba <SPI_EndRxTxTransaction+0x52>
 80061d4:	e000      	b.n	80061d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80061d6:	bf00      	nop
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000010 	.word	0x20000010
 80061e8:	165e9f81 	.word	0x165e9f81

080061ec <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e034      	b.n	800626c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7fa ff7c 	bl	8001114 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3308      	adds	r3, #8
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f000 fca6 	bl	8006b78 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	461a      	mov	r2, r3
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	f000 fcf0 	bl	8006c1c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6858      	ldr	r0, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	f000 fd25 	bl	8006c98 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	6892      	ldr	r2, [r2, #8]
 8006256:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	6892      	ldr	r2, [r2, #8]
 8006262:	f041 0101 	orr.w	r1, r1, #1
 8006266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e041      	b.n	800630a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fd f9dc 	bl	8003658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f000 fa96 	bl	80067e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e04e      	b.n	80063ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a23      	ldr	r2, [pc, #140]	@ (80063d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d022      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x80>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006356:	d01d      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x80>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1f      	ldr	r2, [pc, #124]	@ (80063dc <HAL_TIM_Base_Start_IT+0xc8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d018      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x80>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1e      	ldr	r2, [pc, #120]	@ (80063e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d013      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x80>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1c      	ldr	r2, [pc, #112]	@ (80063e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00e      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x80>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d009      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x80>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a19      	ldr	r2, [pc, #100]	@ (80063ec <HAL_TIM_Base_Start_IT+0xd8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x80>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a18      	ldr	r2, [pc, #96]	@ (80063f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d111      	bne.n	80063b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d010      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0201 	orr.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b6:	e007      	b.n	80063c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40010400 	.word	0x40010400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40001800 	.word	0x40001800

080063f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0202 	mvn.w	r2, #2
 8006420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9b5 	bl	80067a6 <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9a7 	bl	8006792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f9b8 	bl	80067ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b04      	cmp	r3, #4
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b04      	cmp	r3, #4
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0204 	mvn.w	r2, #4
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f98b 	bl	80067a6 <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f97d 	bl	8006792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f98e 	bl	80067ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d122      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d11b      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0208 	mvn.w	r2, #8
 80064c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2204      	movs	r2, #4
 80064ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f961 	bl	80067a6 <HAL_TIM_IC_CaptureCallback>
 80064e4:	e005      	b.n	80064f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f953 	bl	8006792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f964 	bl	80067ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b10      	cmp	r3, #16
 8006504:	d122      	bne.n	800654c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b10      	cmp	r3, #16
 8006512:	d11b      	bne.n	800654c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0210 	mvn.w	r2, #16
 800651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2208      	movs	r2, #8
 8006522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f937 	bl	80067a6 <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f929 	bl	8006792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f93a 	bl	80067ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10e      	bne.n	8006578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d107      	bne.n	8006578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0201 	mvn.w	r2, #1
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fc fe80 	bl	8003278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006582:	2b80      	cmp	r3, #128	@ 0x80
 8006584:	d10e      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006590:	2b80      	cmp	r3, #128	@ 0x80
 8006592:	d107      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fae0 	bl	8006b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ae:	2b40      	cmp	r3, #64	@ 0x40
 80065b0:	d10e      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065bc:	2b40      	cmp	r3, #64	@ 0x40
 80065be:	d107      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8ff 	bl	80067ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d10e      	bne.n	80065fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d107      	bne.n	80065fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0220 	mvn.w	r2, #32
 80065f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 faaa 	bl	8006b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIM_ConfigClockSource+0x1c>
 800661c:	2302      	movs	r3, #2
 800661e:	e0b4      	b.n	800678a <HAL_TIM_ConfigClockSource+0x186>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800663e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006658:	d03e      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0xd4>
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800665e:	f200 8087 	bhi.w	8006770 <HAL_TIM_ConfigClockSource+0x16c>
 8006662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006666:	f000 8086 	beq.w	8006776 <HAL_TIM_ConfigClockSource+0x172>
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666e:	d87f      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b70      	cmp	r3, #112	@ 0x70
 8006672:	d01a      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0xa6>
 8006674:	2b70      	cmp	r3, #112	@ 0x70
 8006676:	d87b      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b60      	cmp	r3, #96	@ 0x60
 800667a:	d050      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x11a>
 800667c:	2b60      	cmp	r3, #96	@ 0x60
 800667e:	d877      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b50      	cmp	r3, #80	@ 0x50
 8006682:	d03c      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0xfa>
 8006684:	2b50      	cmp	r3, #80	@ 0x50
 8006686:	d873      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x16c>
 8006688:	2b40      	cmp	r3, #64	@ 0x40
 800668a:	d058      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x13a>
 800668c:	2b40      	cmp	r3, #64	@ 0x40
 800668e:	d86f      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x16c>
 8006690:	2b30      	cmp	r3, #48	@ 0x30
 8006692:	d064      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x15a>
 8006694:	2b30      	cmp	r3, #48	@ 0x30
 8006696:	d86b      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x16c>
 8006698:	2b20      	cmp	r3, #32
 800669a:	d060      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x15a>
 800669c:	2b20      	cmp	r3, #32
 800669e:	d867      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x16c>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d05c      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x15a>
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d05a      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x15a>
 80066a8:	e062      	b.n	8006770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6899      	ldr	r1, [r3, #8]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f000 f9ad 	bl	8006a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	609a      	str	r2, [r3, #8]
      break;
 80066d6:	e04f      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6899      	ldr	r1, [r3, #8]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f000 f996 	bl	8006a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066fa:	609a      	str	r2, [r3, #8]
      break;
 80066fc:	e03c      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	461a      	mov	r2, r3
 800670c:	f000 f90a 	bl	8006924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2150      	movs	r1, #80	@ 0x50
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f963 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800671c:	e02c      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	461a      	mov	r2, r3
 800672c:	f000 f929 	bl	8006982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2160      	movs	r1, #96	@ 0x60
 8006736:	4618      	mov	r0, r3
 8006738:	f000 f953 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800673c:	e01c      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	461a      	mov	r2, r3
 800674c:	f000 f8ea 	bl	8006924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2140      	movs	r1, #64	@ 0x40
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f943 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800675c:	e00c      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4619      	mov	r1, r3
 8006768:	4610      	mov	r0, r2
 800676a:	f000 f93a 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800676e:	e003      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
      break;
 8006774:	e000      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a40      	ldr	r2, [pc, #256]	@ (80068f8 <TIM_Base_SetConfig+0x114>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <TIM_Base_SetConfig+0x40>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006802:	d00f      	beq.n	8006824 <TIM_Base_SetConfig+0x40>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a3d      	ldr	r2, [pc, #244]	@ (80068fc <TIM_Base_SetConfig+0x118>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00b      	beq.n	8006824 <TIM_Base_SetConfig+0x40>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a3c      	ldr	r2, [pc, #240]	@ (8006900 <TIM_Base_SetConfig+0x11c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <TIM_Base_SetConfig+0x40>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a3b      	ldr	r2, [pc, #236]	@ (8006904 <TIM_Base_SetConfig+0x120>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_Base_SetConfig+0x40>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a3a      	ldr	r2, [pc, #232]	@ (8006908 <TIM_Base_SetConfig+0x124>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d108      	bne.n	8006836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800682a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a2f      	ldr	r2, [pc, #188]	@ (80068f8 <TIM_Base_SetConfig+0x114>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d02b      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006844:	d027      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2c      	ldr	r2, [pc, #176]	@ (80068fc <TIM_Base_SetConfig+0x118>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d023      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2b      	ldr	r2, [pc, #172]	@ (8006900 <TIM_Base_SetConfig+0x11c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01f      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a2a      	ldr	r2, [pc, #168]	@ (8006904 <TIM_Base_SetConfig+0x120>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01b      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a29      	ldr	r2, [pc, #164]	@ (8006908 <TIM_Base_SetConfig+0x124>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d017      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a28      	ldr	r2, [pc, #160]	@ (800690c <TIM_Base_SetConfig+0x128>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a27      	ldr	r2, [pc, #156]	@ (8006910 <TIM_Base_SetConfig+0x12c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00f      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a26      	ldr	r2, [pc, #152]	@ (8006914 <TIM_Base_SetConfig+0x130>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00b      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a25      	ldr	r2, [pc, #148]	@ (8006918 <TIM_Base_SetConfig+0x134>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a24      	ldr	r2, [pc, #144]	@ (800691c <TIM_Base_SetConfig+0x138>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a23      	ldr	r2, [pc, #140]	@ (8006920 <TIM_Base_SetConfig+0x13c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d108      	bne.n	80068a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <TIM_Base_SetConfig+0x114>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_Base_SetConfig+0xf8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006908 <TIM_Base_SetConfig+0x124>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d103      	bne.n	80068e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	615a      	str	r2, [r3, #20]
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40010000 	.word	0x40010000
 80068fc:	40000400 	.word	0x40000400
 8006900:	40000800 	.word	0x40000800
 8006904:	40000c00 	.word	0x40000c00
 8006908:	40010400 	.word	0x40010400
 800690c:	40014000 	.word	0x40014000
 8006910:	40014400 	.word	0x40014400
 8006914:	40014800 	.word	0x40014800
 8006918:	40001800 	.word	0x40001800
 800691c:	40001c00 	.word	0x40001c00
 8006920:	40002000 	.word	0x40002000

08006924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800694e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 030a 	bic.w	r3, r3, #10
 8006960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006982:	b480      	push	{r7}
 8006984:	b087      	sub	sp, #28
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0210 	bic.w	r2, r3, #16
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f043 0307 	orr.w	r3, r3, #7
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	021a      	lsls	r2, r3, #8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e05a      	b.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a21      	ldr	r2, [pc, #132]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d022      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006abc:	d01d      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d018      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00e      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a18      	ldr	r2, [pc, #96]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d009      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a17      	ldr	r2, [pc, #92]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d004      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a15      	ldr	r2, [pc, #84]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d10c      	bne.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	40000800 	.word	0x40000800
 8006b40:	40000c00 	.word	0x40000c00
 8006b44:	40010400 	.word	0x40010400
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40001800 	.word	0x40001800

08006b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4b20      	ldr	r3, [pc, #128]	@ (8006c18 <FSMC_NORSRAM_Init+0xa0>)
 8006b96:	4013      	ands	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006ba2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006ba8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006bae:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006bb4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006bba:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006bc0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006bc6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8006bcc:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8006bd2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8006bd8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8006bde:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8006be4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d103      	bne.n	8006bfc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bfa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	fff00080 	.word	0xfff00080

08006c1c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c36:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006c3e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c4a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c52:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c5a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c64:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	3b02      	subs	r3, #2
 8006c6c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c6e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c74:	4313      	orrs	r3, r2
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6979      	ldr	r1, [r7, #20]
 8006c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
	...

08006c98 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cb0:	d122      	bne.n	8006cf8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cba:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4b15      	ldr	r3, [pc, #84]	@ (8006d14 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006cce:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006cd6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006cde:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ce4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6979      	ldr	r1, [r7, #20]
 8006cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006cf6:	e005      	b.n	8006d04 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	cff00000 	.word	0xcff00000

08006d18 <memset>:
 8006d18:	4402      	add	r2, r0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <memset+0xa>
 8006d20:	4770      	bx	lr
 8006d22:	f803 1b01 	strb.w	r1, [r3], #1
 8006d26:	e7f9      	b.n	8006d1c <memset+0x4>

08006d28 <__libc_init_array>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006d60 <__libc_init_array+0x38>)
 8006d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006d64 <__libc_init_array+0x3c>)
 8006d2e:	1b64      	subs	r4, r4, r5
 8006d30:	10a4      	asrs	r4, r4, #2
 8006d32:	2600      	movs	r6, #0
 8006d34:	42a6      	cmp	r6, r4
 8006d36:	d109      	bne.n	8006d4c <__libc_init_array+0x24>
 8006d38:	4d0b      	ldr	r5, [pc, #44]	@ (8006d68 <__libc_init_array+0x40>)
 8006d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006d6c <__libc_init_array+0x44>)
 8006d3c:	f000 f818 	bl	8006d70 <_init>
 8006d40:	1b64      	subs	r4, r4, r5
 8006d42:	10a4      	asrs	r4, r4, #2
 8006d44:	2600      	movs	r6, #0
 8006d46:	42a6      	cmp	r6, r4
 8006d48:	d105      	bne.n	8006d56 <__libc_init_array+0x2e>
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d50:	4798      	blx	r3
 8006d52:	3601      	adds	r6, #1
 8006d54:	e7ee      	b.n	8006d34 <__libc_init_array+0xc>
 8006d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5a:	4798      	blx	r3
 8006d5c:	3601      	adds	r6, #1
 8006d5e:	e7f2      	b.n	8006d46 <__libc_init_array+0x1e>
 8006d60:	08009d84 	.word	0x08009d84
 8006d64:	08009d84 	.word	0x08009d84
 8006d68:	08009d84 	.word	0x08009d84
 8006d6c:	08009d88 	.word	0x08009d88

08006d70 <_init>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr

08006d7c <_fini>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr
